version: '3.8'

services:
  # MediaFlux Hub - Основное приложение
  mediaflux-hub:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./content:/app/content
      - ./logs:/app/logs
      - ./proxies:/app/proxies
      - ./uploads:/app/uploads
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mediaflux-network
    environment:
      - DATABASE_URL=postgresql://mediaflux:password@postgres:5432/mediaflux_hub
      - REDIS_URL=redis://redis:6379

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mediaflux_hub
      POSTGRES_USER: mediaflux
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mediaflux -d mediaflux_hub"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mediaflux-network

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - mediaflux-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/static:/var/www/static:ro
    depends_on:
      - mediaflux-hub
    restart: unless-stopped
    networks:
      - mediaflux-network

  # Monitoring with Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mediaflux-network
    profiles:
      - monitoring

  # Grafana для визуализации (опционально)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=mediaflux123
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - mediaflux-network
    profiles:
      - monitoring

  # Backup service (опционально)
  backup:
    image: alpine:latest
    volumes:
      - postgres_data:/data/postgres:ro
      - redis_data:/data/redis:ro
      - ./content:/data/content:ro
      - ./backups:/backups
    command: |
      sh -c "
        apk add --no-cache postgresql-client redis
        while true; do
          echo 'Starting backup...'
          pg_dump -h postgres -U mediaflux mediaflux_hub > /backups/postgres_\$(date +%Y%m%d_%H%M%S).sql
          redis-cli -h redis --rdb /backups/redis_\$(date +%Y%m%d_%H%M%S).rdb
          tar -czf /backups/content_\$(date +%Y%m%d_%H%M%S).tar.gz -C /data content
          find /backups -name '*.sql' -mtime +7 -delete
          find /backups -name '*.rdb' -mtime +7 -delete
          find /backups -name '*.tar.gz' -mtime +7 -delete
          echo 'Backup completed. Sleeping for 24 hours...'
          sleep 86400
        done
      "
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - mediaflux-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mediaflux-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 