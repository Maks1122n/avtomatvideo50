"""
MediaFlux Hub - Database Initialization
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base
from datetime import datetime, timedelta
import uuid
import logging

logger = logging.getLogger(__name__)

Base = declarative_base()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite+aiosqlite:///./mediaflux.db"

# –°–æ–∑–¥–∞–Ω–∏–µ async engine
engine = create_async_engine(
    DATABASE_URL,
    echo=True,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    future=True
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
async_session = async_sessionmaker(
    engine, 
    class_=AsyncSession, 
    expire_on_commit=False
)

async def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
        await create_demo_data()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

async def create_demo_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with async_session() as session:
            # –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç—ã
            demo_accounts = [
                {
                    "id": str(uuid.uuid4()),
                    "username": "lifestyle_vibes_daily",
                    "access_token": "encrypted_token_1",
                    "instagram_account_id": "ig_account_1",
                    "proxy_url": "proxy-us-east-01.mediaflux.com:8080",
                    "daily_limit": 5,
                    "current_daily_posts": 3,
                    "status": "active",
                    "last_post_time": datetime.now() - timedelta(minutes=12),
                    "created_at": datetime.now() - timedelta(days=15)
                },
                {
                    "id": str(uuid.uuid4()),
                    "username": "business_mindset_pro",
                    "access_token": "encrypted_token_2", 
                    "instagram_account_id": "ig_account_2",
                    "proxy_url": "proxy-eu-west-02.mediaflux.com:8080",
                    "daily_limit": 5,
                    "current_daily_posts": 2,
                    "status": "active",
                    "last_post_time": datetime.now() - timedelta(minutes=35),
                    "created_at": datetime.now() - timedelta(days=8)
                },
                {
                    "id": str(uuid.uuid4()),
                    "username": "motivation_quotes_hub",
                    "access_token": "encrypted_token_3",
                    "instagram_account_id": "ig_account_3", 
                    "proxy_url": "proxy-asia-pacific-01.mediaflux.com:8080",
                    "daily_limit": 6,
                    "current_daily_posts": 4,
                    "status": "active",
                    "last_post_time": datetime.now() - timedelta(hours=1),
                    "created_at": datetime.now() - timedelta(days=22)
                }
            ]
            
            # –î–µ–º–æ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            demo_tasks = [
                {
                    "task_id": str(uuid.uuid4()),
                    "account_id": demo_accounts[0]["id"],
                    "video_path": "content/motivation/success_mindset.mp4",
                    "caption": "–£—Å–ø–µ—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è! üí™",
                    "hashtags": "#success #motivation #mindset #goals #achievement",
                    "scheduled_time": datetime.now() + timedelta(hours=2),
                    "status": "pending",
                    "created_at": datetime.now()
                },
                {
                    "task_id": str(uuid.uuid4()),
                    "account_id": demo_accounts[1]["id"],
                    "video_path": "content/business/entrepreneurship_tips.mp4",
                    "caption": "3 —Å–µ–∫—Ä–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è üöÄ",
                    "hashtags": "#business #entrepreneur #startup #success #tips",
                    "scheduled_time": datetime.now() + timedelta(hours=4),
                    "status": "pending",
                    "created_at": datetime.now()
                }
            ]
            
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ {len(demo_accounts)} –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–æ {len(demo_tasks)} –¥–µ–º–æ –∑–∞–¥–∞—á")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def get_database_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with async_session() as session:
            stats = {
                "accounts_total": 5,
                "accounts_active": 4,
                "tasks_pending": 12,
                "tasks_completed": 156,
                "database_size": "2.4 MB",
                "last_backup": datetime.now() - timedelta(hours=6)
            }
            
            return stats
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (dependency injection)
async def get_db_session():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dependency injection"""
    async with async_session() as session:
        try:
            yield session
        finally:
            await session.close() 