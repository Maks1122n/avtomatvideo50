"""
MediaFlux Hub - Proxy Service
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Å –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
"""
import logging
import random
import asyncio
import aiohttp
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from pathlib import Path

from app.config import settings
from app.database import SessionLocal, Proxy, Account

logger = logging.getLogger("mediaflux_hub.proxy")


class ProxyManager:
    """MediaFlux Hub - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.proxy_file = settings.PROXIES_DIR / "proxies.txt"
        self.test_url = "https://httpbin.org/ip"
        self.timeout = 10
        self._proxy_cache = {}
        
    async def load_proxies_from_file(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        proxies = []
        
        if not self.proxy_file.exists():
            logger.warning(f"üìÅ MediaFlux Hub: –§–∞–π–ª –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.proxy_file}")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞
            await self._create_example_proxy_file()
            return proxies
        
        try:
            with open(self.proxy_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            for line_num, line in enumerate(lines, 1):
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                proxy_data = self._parse_proxy_line(line)
                if proxy_data:
                    proxies.append(proxy_data)
                else:
                    logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–∫—Å–∏ #{line_num}: {line}")
            
            logger.info(f"üìä MediaFlux Hub: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        
        return proxies
    
    def _parse_proxy_line(self, line: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            # –§–æ—Ä–º–∞—Ç: http://user:pass@ip:port|Country|City
            if '|' in line:
                proxy_url, location_info = line.split('|', 1)
                location_parts = location_info.split('|')
                country = location_parts[0] if len(location_parts) > 0 else "Unknown"
                city = location_parts[1] if len(location_parts) > 1 else "Unknown"
            else:
                proxy_url = line
                country = "Unknown"
                city = "Unknown"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
            if not any(proxy_url.startswith(proto) for proto in ['http://', 'https://', 'socks4://', 'socks5://']):
                return None
            
            return {
                'proxy_url': proxy_url,
                'country': country,
                'city': city
            }
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return None
    
    async def _create_example_proxy_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏"""
        example_content = """# MediaFlux Hub - Proxy Configuration
# –§–æ—Ä–º–∞—Ç: protocol://user:pass@ip:port|Country|City
# –ü—Ä–∏–º–µ—Ä:

# http://user1:pass1@123.456.789.1:8080|US|New York
# http://user2:pass2@123.456.789.2:8080|UK|London
# socks5://user3:pass3@123.456.789.3:1080|DE|Berlin

# –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–∫—Å–∏ –∑–¥–µ—Å—å:
"""
        
        try:
            with open(self.proxy_file, 'w', encoding='utf-8') as f:
                f.write(example_content)
            logger.info(f"üìÅ MediaFlux Hub: –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏: {self.proxy_file}")
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏: {e}")
    
    async def sync_proxies_to_database(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ MediaFlux Hub: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        
        file_proxies = await self.load_proxies_from_file()
        
        if not file_proxies:
            logger.warning("‚ö†Ô∏è MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ")
            return
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–∫—Å–∏
            existing_proxies = {proxy.proxy_url: proxy for proxy in db.query(Proxy).all()}
            
            added_count = 0
            updated_count = 0
            
            for proxy_data in file_proxies:
                proxy_url = proxy_data['proxy_url']
                
                if proxy_url in existing_proxies:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                    proxy = existing_proxies[proxy_url]
                    proxy.country = proxy_data['country']
                    proxy.city = proxy_data['city']
                    proxy.updated_at = datetime.now()
                    updated_count += 1
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                    proxy = Proxy(
                        proxy_url=proxy_url,
                        country=proxy_data['country'],
                        city=proxy_data['city']
                    )
                    db.add(proxy)
                    added_count += 1
            
            db.commit()
            logger.info(f"‚úÖ MediaFlux Hub: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            db.rollback()
        finally:
            db.close()
    
    async def test_proxy(self, proxy_url: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        try:
            connector = aiohttp.TCPConnector(ssl=False)
            timeout = aiohttp.ClientTimeout(total=self.timeout)
            
            async with aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
            ) as session:
                async with session.get(self.test_url, proxy=proxy_url) as response:
                    if response.status == 200:
                        result = await response.json()
                        logger.debug(f"‚úÖ MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {proxy_url} -> IP: {result.get('origin', 'unknown')}")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}: {proxy_url}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ MediaFlux Hub: –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {proxy_url}")
            return False
        except Exception as e:
            logger.warning(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_url}: {e}")
            return False
    
    async def test_all_proxies(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
        logger.info("üß™ MediaFlux Hub: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏...")
        
        db = SessionLocal()
        try:
            proxies = db.query(Proxy).all()
            
            if not proxies:
                logger.warning("‚ö†Ô∏è MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return {}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–º–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
            semaphore = asyncio.Semaphore(10)
            tasks = []
            
            async def test_single_proxy(proxy):
                async with semaphore:
                    result = await self.test_proxy(proxy.proxy_url)
                    return proxy.proxy_url, result, proxy.id
            
            tasks = [test_single_proxy(proxy) for proxy in proxies]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            test_results = {}
            working_count = 0
            
            for result in results:
                if isinstance(result, tuple):
                    proxy_url, is_working, proxy_id = result
                    test_results[proxy_url] = is_working
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                    proxy = db.query(Proxy).filter(Proxy.id == proxy_id).first()
                    if proxy:
                        if is_working:
                            proxy.is_active = True
                            proxy.error_count = 0
                            working_count += 1
                        else:
                            proxy.error_count += 1
                            if proxy.error_count >= proxy.max_errors:
                                proxy.is_active = False
                        
                        proxy.last_used = datetime.now()
                        proxy.updated_at = datetime.now()
            
            db.commit()
            
            logger.info(f"‚úÖ MediaFlux Hub: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {working_count}/{len(proxies)}")
            return test_results
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            db.rollback()
            return {}
        finally:
            db.close()
    
    async def get_proxy_for_account(self, account_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ–∫—Å–∏
            account = db.query(Account).filter(Account.id == account_id).first()
            if not account:
                return None
            
            if account.proxy_url:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                proxy = db.query(Proxy).filter(Proxy.proxy_url == account.proxy_url).first()
                if proxy and proxy.is_active:
                    return account.proxy_url
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            new_proxy_url = await self.assign_proxy_to_account(account_id)
            return new_proxy_url
            
        finally:
            db.close()
    
    async def assign_proxy_to_account(self, account_id: str) -> Optional[str]:
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç—É"""
        db = SessionLocal()
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–∫—Å–∏
            available_proxies = db.query(Proxy).filter(
                Proxy.is_active == True,
                Proxy.accounts_assigned < Proxy.max_accounts
            ).order_by(Proxy.accounts_assigned.asc(), Proxy.last_used.asc()).all()
            
            if not available_proxies:
                logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ —Ç–æ–ø-5 –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
            top_proxies = available_proxies[:5]
            selected_proxy = random.choice(top_proxies)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account = db.query(Account).filter(Account.id == account_id).first()
            if account:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–∫—Å–∏
                if account.proxy_url:
                    await self._release_proxy_from_account(account.proxy_url, db)
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–π
                account.proxy_url = selected_proxy.proxy_url
                account.updated_at = datetime.now()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∫—Å–∏
                selected_proxy.accounts_assigned += 1
                selected_proxy.last_used = datetime.now()
                selected_proxy.updated_at = datetime.now()
                
                db.commit()
                
                logger.info(f"üîó MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ {selected_proxy.proxy_url} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç—É {account.username}")
                return selected_proxy.proxy_url
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            db.rollback()
        finally:
            db.close()
        
        return None
    
    async def _release_proxy_from_account(self, proxy_url: str, db):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"""
        proxy = db.query(Proxy).filter(Proxy.proxy_url == proxy_url).first()
        if proxy and proxy.accounts_assigned > 0:
            proxy.accounts_assigned -= 1
            proxy.updated_at = datetime.now()
    
    async def rotate_proxy_on_error(self, account_id: str):
        """–°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        logger.info(f"üîÑ MediaFlux Hub: –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
        
        db = SessionLocal()
        try:
            account = db.query(Account).filter(Account.id == account_id).first()
            if not account:
                return
            
            old_proxy_url = account.proxy_url
            
            # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
            if old_proxy_url:
                proxy = db.query(Proxy).filter(Proxy.proxy_url == old_proxy_url).first()
                if proxy:
                    proxy.error_count += 1
                    if proxy.error_count >= proxy.max_errors:
                        proxy.is_active = False
                        logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ {old_proxy_url} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
                    
                    proxy.accounts_assigned = max(0, proxy.accounts_assigned - 1)
                    proxy.updated_at = datetime.now()
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            account.proxy_url = None
            db.commit()
            
            new_proxy_url = await self.assign_proxy_to_account(account_id)
            
            if new_proxy_url:
                logger.info(f"‚úÖ MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω: {old_proxy_url} -> {new_proxy_url}")
            else:
                logger.error(f"üí• MediaFlux Hub: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            db.rollback()
        finally:
            db.close()
    
    async def get_proxy_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        db = SessionLocal()
        try:
            total_proxies = db.query(Proxy).count()
            active_proxies = db.query(Proxy).filter(Proxy.is_active == True).count()
            assigned_proxies = db.query(Proxy).filter(Proxy.accounts_assigned > 0).count()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            country_stats = {}
            proxies = db.query(Proxy).all()
            for proxy in proxies:
                country = proxy.country or "Unknown"
                if country not in country_stats:
                    country_stats[country] = {'total': 0, 'active': 0}
                country_stats[country]['total'] += 1
                if proxy.is_active:
                    country_stats[country]['active'] += 1
            
            return {
                'total': total_proxies,
                'active': active_proxies,
                'assigned': assigned_proxies,
                'available': active_proxies - assigned_proxies,
                'countries': country_stats,
                'utilization': (assigned_proxies / max(active_proxies, 1)) * 100
            }
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return {}
        finally:
            db.close()
    
    async def optimize_proxy_assignment(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        logger.info("üîß MediaFlux Hub: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏...")
        
        db = SessionLocal()
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
            accounts_needing_proxy = db.query(Account).join(
                Proxy, Account.proxy_url == Proxy.proxy_url, isouter=True
            ).filter(
                (Proxy.is_active == False) | (Proxy.id == None)
            ).all()
            
            reassigned_count = 0
            for account in accounts_needing_proxy:
                new_proxy = await self.assign_proxy_to_account(account.id)
                if new_proxy:
                    reassigned_count += 1
            
            logger.info(f"‚úÖ MediaFlux Hub: –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {reassigned_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        finally:
            db.close() 