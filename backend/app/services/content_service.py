"""
MediaFlux Hub - Content Service
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–ø–∏—Å–∞–Ω–∏–π
"""
import os
import random
import hashlib
import aiofiles
import logging
from pathlib import Path
from typing import List, Optional, Dict, Any, Tuple
from datetime import datetime

from app.config import settings
from app.database import SessionLocal, ContentFolder, PostTask

logger = logging.getLogger("mediaflux_hub.content")


class MediaFluxContentService:
    """MediaFlux Hub - –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    
    def __init__(self):
        self.content_base_path = Path(settings.CONTENT_DIR)
        
        # –ü—É–ª—ã —Ö–µ—à—Ç–µ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.hashtag_pools = {
            'motivation': [
                '#motivation', '#success', '#inspiration', '#mindset', 
                '#goals', '#hustle', '#grind', '#nevergiveup', '#believe',
                '#entrepreneur', '#businessmotivation', '#successmindset',
                '#motivationalquotes', '#dailymotivation', '#goalgetter',
                '#hardwork', '#determination', '#perseverance', '#ambition'
            ],
            'lifestyle': [
                '#lifestyle', '#daily', '#life', '#mood', '#vibes',
                '#aesthetic', '#selfcare', '#wellness', '#balance',
                '#dailylife', '#goodvibes', '#positive', '#happiness',
                '#mindfulness', '#peaceful', '#relaxing', '#cozy',
                '#inspiration', '#beautiful', '#simplicity'
            ],
            'business': [
                '#business', '#entrepreneur', '#startup', '#money',
                '#success', '#marketing', '#growth', '#leadership',
                '#businesstips', '#investing', '#wealth', '#finance',
                '#productivity', '#networking', '#innovation', '#strategy',
                '#businessowner', '#ceo', '#profitable', '#scaling'
            ],
            'entertainment': [
                '#entertainment', '#fun', '#viral', '#trending',
                '#funny', '#amazing', '#cool', '#awesome',
                '#wow', '#incredible', '#mindblowing', '#epic',
                '#satisfying', '#interesting', '#creative', '#unique',
                '#spectacular', '#fascinating', '#remarkable'
            ]
        }
        
        # –®–∞–±–ª–æ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.caption_templates = {
            'motivation': [
                "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üí™ {emojis}",
                "–£—Å–ø–µ—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞! üöÄ {emojis}",
                "–¢–≤–æ–∏ –º–µ—á—Ç—ã –∂–¥—É—Ç –¥–µ–π—Å—Ç–≤–∏–π! ‚ú® {emojis}",
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! –¢–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç! üî• {emojis}",
                "–í–µ—Ä—å –≤ —Å–µ–±—è –∏ –¥–≤–∏–≥–∞–π—Å—è –∫ —Ü–µ–ª–∏! üéØ {emojis}",
                "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥! üèÜ {emojis}",
                "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üíé {emojis}",
                "–ü—Ä–µ–≤—Ä–∞—â–∞–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! ‚ö° {emojis}",
                "–ë—É–¥—É—â–µ–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è! üåü {emojis}",
                "–ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —É—Å–ø–µ—Ö—É! üé™ {emojis}"
            ],
            'lifestyle': [
                "–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º –∂–∏–∑–Ω–∏! üåü {emojis}",
                "–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –≤ –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ—â–∞—Ö! üí´ {emojis}",
                "–ù–∞–π–¥–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –≥–∞—Ä–º–æ–Ω–∏—é! ‚öñÔ∏è {emojis}",
                "–ë—É–¥—å —Å–æ–±–æ–π - —ç—Ç–æ —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞! üåà {emojis}",
                "–°–æ–∑–¥–∞–≤–∞–π –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–Ω—è—Ç—Å—è! üì∏ {emojis}",
                "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! ‚ú® {emojis}",
                "–ñ–∏–≤–∏ —è—Ä–∫–æ –∏ –Ω–µ –æ–≥–ª—è–¥—ã–≤–∞–π—Å—è! üé® {emojis}",
                "–°—á–∞—Å—Ç—å–µ –≤ –º–µ–ª–æ—á–∞—Ö! üçÉ {emojis}",
                "–¢–≤–æ—è –∂–∏–∑–Ω—å - —Ç–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞! üóùÔ∏è {emojis}",
                "–í–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –¥—Ä—É–≥–∏—Ö! üåª {emojis}"
            ],
            'business': [
                "–°—Ç—Ä–æ–π —Å–≤–æ—é –±–∏–∑–Ω–µ—Å-–∏–º–ø–µ—Ä–∏—é! üèóÔ∏è {emojis}",
                "–£—Å–ø–µ—Ö —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π, –∞ –Ω–µ —Å–ª–æ–≤! üìà {emojis}",
                "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ —Å–µ–±—è - –ª—É—á—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è! üí∞ {emojis}",
                "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ - —ç—Ç–æ –≤—ã–±–æ—Ä, –∞ –Ω–µ –ø–æ–∑–∏—Ü–∏—è! üëë {emojis}",
                "–î—É–º–∞–π –º–∞—Å—à—Ç–∞–±–Ω–æ, –¥–µ–π—Å—Ç–≤—É–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏! üéØ {emojis}",
                "–ö–∞–∂–¥–∞—è –Ω–µ—É–¥–∞—á–∞ - —É—Ä–æ–∫ –¥–ª—è —Ä–æ—Å—Ç–∞! üìö {emojis}",
                "–°–æ–∑–¥–∞–≤–∞–π —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –±–æ–≥–∞—Ç—Å—Ç–≤–æ –ø—Ä–∏–¥–µ—Ç! üíé {emojis}",
                "–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ - –∫–ª—é—á –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º! ü§ù {emojis}",
                "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –±—É–¥—É—â–µ–µ! üöÄ {emojis}",
                "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π –±–∏–∑–Ω–µ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ö° {emojis}"
            ],
            'entertainment': [
                "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! ü§© {emojis}",
                "–¢–∞–∫–æ–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–∏–¥–µ—Ç—å! üëÄ {emojis}",
                "–≠—Ç–æ –ø–æ—Ä–∞–∂–∞–µ—Ç –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üéâ {emojis}",
                "–¢–æ–ø–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—Å! üî• {emojis}",
                "–ù–µ –º–æ–≥—É –ø–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏–º –≥–ª–∞–∑–∞–º! üò± {emojis}",
                "–≠—Ç–æ —Ç–æ—á–Ω–æ –ø–æ–ø–∞–¥–µ—Ç –≤ —Ç—Ä–µ–Ω–¥—ã! üìà {emojis}",
                "–ü—Ä–æ—Å—Ç–æ –º–∞–≥–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç! ‚ú® {emojis}",
                "–≠—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –º–∏–ª–ª–∏–æ–Ω –ª–∞–π–∫–æ–≤! ‚ù§Ô∏è {emojis}",
                "–ö–æ–Ω—Ç–µ–Ω—Ç –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞! üíØ {emojis}",
                "–≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–π –¥–µ–Ω—å –∫ –ª—É—á—à–µ–º—É! üåà {emojis}"
            ]
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –æ–ø–∏—Å–∞–Ω–∏—è–º
        self.emoji_sets = [
            ["üéØ", "üíé", "üåü"],
            ["‚ö°", "üé®", "üé™"],
            ["üîÆ", "üé≤", "üéä"],
            ["üöÄ", "üí´", "‚≠ê"],
            ["üî•", "üí™", "üèÜ"],
            ["‚ú®", "üåà", "üí´"],
            ["üéâ", "üé≠", "üé®"],
            ["üíé", "‚ö°", "üî•"]
        ]
    
    async def scan_content_folders(self, db=None) -> List[ContentFolder]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        logger.info("üìÅ MediaFlux Hub: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º...")
        
        if db is None:
            db = SessionLocal()
            should_close_db = True
        else:
            should_close_db = False
        
        try:
            folders = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏
            if not self.content_base_path.exists():
                logger.warning(f"üìÅ MediaFlux Hub: –ü–∞–ø–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.content_base_path}")
                self.content_base_path.mkdir(parents=True, exist_ok=True)
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for category in ['motivation', 'lifestyle', 'business', 'entertainment']:
                    (self.content_base_path / category).mkdir(exist_ok=True)
                
                logger.info("üìÅ MediaFlux Hub: –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return folders
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É
            for folder_path in self.content_base_path.iterdir():
                if not folder_path.is_dir():
                    continue
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
                video_files = self._get_video_files(folder_path)
                video_count = len(video_files)
                
                if video_count == 0:
                    logger.debug(f"üìÅ MediaFlux Hub: –ü–∞–ø–∫–∞ {folder_path.name} –ø—É—Å—Ç–∞")
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞–ø–∫–∏
                category = self._determine_category(folder_path.name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –≤ –ë–î
                existing_folder = db.query(ContentFolder).filter(
                    ContentFolder.path == str(folder_path)
                ).first()
                
                if existing_folder:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                    existing_folder.total_videos = video_count
                    existing_folder.category = category
                    existing_folder.updated_at = datetime.now()
                    folders.append(existing_folder)
                    logger.debug(f"üìÅ MediaFlux Hub: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ {folder_path.name} ({video_count} –≤–∏–¥–µ–æ)")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    folder = ContentFolder(
                        name=folder_path.name,
                        path=str(folder_path),
                        total_videos=video_count,
                        category=category,
                        is_active=True
                    )
                    db.add(folder)
                    folders.append(folder)
                    logger.info(f"üìÅ MediaFlux Hub: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ {folder_path.name} ({video_count} –≤–∏–¥–µ–æ)")
            
            db.commit()
            logger.info(f"‚úÖ MediaFlux Hub: –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(folders)} –ø–∞–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
            
            return folders
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            db.rollback()
            return []
        finally:
            if should_close_db:
                db.close()
    
    def _get_video_files(self, folder_path: Path) -> List[Path]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        video_files = []
        
        for ext in settings.ALLOWED_VIDEO_EXTENSIONS:
            video_files.extend(folder_path.glob(f"*{ext}"))
            video_files.extend(folder_path.glob(f"*{ext.upper()}"))
        
        return video_files
    
    def _determine_category(self, folder_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞–ø–∫–∏"""
        folder_lower = folder_name.lower()
        
        motivation_keywords = ['motiv', 'success', 'inspire', 'goal', 'achieve']
        lifestyle_keywords = ['lifestyle', 'life', 'daily', 'routine', 'personal']
        business_keywords = ['business', 'money', 'entrepreneur', 'startup', 'finance']
        
        if any(keyword in folder_lower for keyword in motivation_keywords):
            return 'motivation'
        elif any(keyword in folder_lower for keyword in lifestyle_keywords):
            return 'lifestyle'
        elif any(keyword in folder_lower for keyword in business_keywords):
            return 'business'
        else:
            return 'entertainment'
    
    async def get_unused_video(self, folder_id: str, account_id: str, db) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
            folder = db.query(ContentFolder).filter(
                ContentFolder.folder_id == folder_id
            ).first()
            
            if not folder:
                logger.warning(f"üìÅ MediaFlux Hub: –ü–∞–ø–∫–∞ {folder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            folder_path = Path(folder.path)
            if not folder_path.exists():
                logger.warning(f"üìÅ MediaFlux Hub: –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
                return None
            
            video_files = self._get_video_files(folder_path)
            
            if not video_files:
                logger.warning(f"üìÅ MediaFlux Hub: –ù–µ—Ç –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ {folder.name}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            used_videos = set()
            used_tasks = db.query(PostTask).filter(
                PostTask.account_id == account_id,
                PostTask.folder_id == folder_id,
                PostTask.status.in_(['completed', 'processing'])
            ).all()
            
            for task in used_tasks:
                used_videos.add(str(task.video_path))
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            available_videos = [
                str(video) for video in video_files 
                if str(video) not in used_videos
            ]
            
            if not available_videos:
                # –ï—Å–ª–∏ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –±–µ—Ä–µ–º –ª—é–±–æ–µ (–Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª)
                available_videos = [str(video) for video in video_files]
                logger.info(f"üîÑ MediaFlux Hub: –í—Å–µ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–∞–ø–∫–∏ {folder.name}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ
            selected_video = random.choice(available_videos)
            
            logger.debug(f"üìΩÔ∏è MediaFlux Hub: –í—ã–±—Ä–∞–Ω–æ –≤–∏–¥–µ–æ: {Path(selected_video).name}")
            return selected_video
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            return None
    
    async def generate_unique_caption(self, folder_name: str, video_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._determine_category(folder_name)
            
            # –í—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            templates = self.caption_templates.get(category, self.caption_templates['entertainment'])
            base_caption = random.choice(templates)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
            emoji_set = random.choice(self.emoji_sets)
            emojis_str = ' '.join(emoji_set)
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —à–∞–±–ª–æ–Ω
            caption = base_caption.format(emojis=emojis_str)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
            hashtags = self._generate_hashtags(category)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            time_based_addition = self._get_time_based_addition()
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            final_caption = f"{caption}\n\n{time_based_addition}\n\n{hashtags}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            final_caption = self._add_uniqueness(final_caption, video_path)
            
            logger.debug(f"üìù MediaFlux Hub: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {Path(video_path).name}")
            return final_caption
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            return "–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç! üî•\n\n#viral #trending #awesome"
    
    def _generate_hashtags(self, category: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤"""
        category_hashtags = self.hashtag_pools.get(category, self.hashtag_pools['entertainment'])
        general_hashtags = ['#viral', '#trending', '#reels', '#explore', '#fyp', '#instagram', '#amazing']
        
        # –í—ã–±–∏—Ä–∞–µ–º 4-6 —Ö–µ—à—Ç–µ–≥–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        selected_category = random.sample(
            category_hashtags, 
            min(len(category_hashtags), random.randint(4, 6))
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º 2-4 –æ–±—â–∏—Ö —Ö–µ—à—Ç–µ–≥–∞
        selected_general = random.sample(
            general_hashtags, 
            min(len(general_hashtags), random.randint(2, 4))
        )
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        all_hashtags = selected_category + selected_general
        random.shuffle(all_hashtags)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ö–µ—à—Ç–µ–≥–æ–≤ –º–∞–∫—Å–∏–º—É–º
        all_hashtags = all_hashtags[:10]
        
        return ' '.join(all_hashtags)
    
    def _get_time_based_addition(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏"""
        hour = datetime.now().hour
        
        if 6 <= hour < 12:
            morning_phrases = [
                "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚òÄÔ∏è",
                "–£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –≤–∞—Å! üåÖ",
                "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è! ‚è∞",
                "–£—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°"
            ]
            return random.choice(morning_phrases)
        elif 12 <= hour < 18:
            afternoon_phrases = [
                "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! üåû",
                "–î–Ω–µ–≤–Ω–æ–π –∑–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤–∞! ‚≠ê",
                "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è –≤—Å–µ–º! üí™",
                "–î–Ω–µ–≤–Ω–∞—è –ø–æ—Ä—Ü–∏—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üéØ"
            ]
            return random.choice(afternoon_phrases)
        elif 18 <= hour < 22:
            evening_phrases = [
                "–í–µ—á–µ—Ä–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è! üåÜ",
                "–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–Ω—å –Ω–∞ –≤—ã—Å–æ–∫–æ–π –Ω–æ—Ç–µ! üéµ",
                "–í–µ—á–µ—Ä–Ω–µ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! ‚ú®",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–µ—á–µ—Ä –≤—Å–µ–º! üåô"
            ]
            return random.choice(evening_phrases)
        else:
            night_phrases = [
                "–ù–æ—á–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö! üåÉ",
                "–ü–æ–∑–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö! ü¶â",
                "–ù–æ—á–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! üåü",
                "–î–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —Å–ø–∏—Ç! üò¥"
            ]
            return random.choice(night_phrases)
    
    def _add_uniqueness(self, caption: str, video_path: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–µ–æ"""
        # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        file_hash = hashlib.md5(video_path.encode()).hexdigest()[:8]
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –≤—ã–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        hash_int = int(file_hash, 16)
        
        unique_additions = [
            "–≠—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –±–µ—Å—Ü–µ–Ω–µ–Ω! üíé",
            "–°–æ—Ö—Ä–∞–Ω—è–π –∏ –¥–µ–ª–∏—Å—å! üìå",
            "–¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! üí¨",
            "–î–≤–æ–π–Ω–æ–π —Ç–∞–ø, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω! ‚ù§Ô∏è",
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞! üëÜ",
            "–û—Ç–º–µ—á–∞–π –¥—Ä—É–∑–µ–π! üë•",
            "–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç? ü§î",
            "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º? üí≠"
        ]
        
        if hash_int % 3 == 0:  # –î–æ–±–∞–≤–ª—è–µ–º –≤ 33% —Å–ª—É—á–∞–µ–≤
            addition = unique_additions[hash_int % len(unique_additions)]
            caption += f"\n\n{addition}"
        
        return caption
    
    async def upload_to_public_storage(self, video_path: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(video_path):
                logger.error(f"üìΩÔ∏è MediaFlux Hub: –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = os.path.getsize(video_path)
            max_size = settings.MAX_VIDEO_SIZE_MB * 1024 * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
            
            if file_size > max_size:
                logger.error(f"üìΩÔ∏è MediaFlux Hub: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Ñ–∞–π–ª–∞
            with open(video_path, 'rb') as f:
                file_content = f.read()
                file_hash = hashlib.sha256(file_content).hexdigest()[:16]
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞:
            # - AWS S3 —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            # - Google Cloud Storage  
            # - Cloudinary
            # - –ò–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π CDN
            
            # –î–ª—è –¥–µ–º–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
            file_extension = Path(video_path).suffix
            public_url = f"https://mediaflux-storage.example.com/videos/{file_hash}{file_extension}"
            
            logger.info(f"üì§ MediaFlux Hub: –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {Path(video_path).name} -> {public_url}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å actual –∑–∞–≥—Ä—É–∑–∫–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
            return public_url
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ {video_path}: {e}")
            return None
    
    async def get_content_statistics(self, db=None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if db is None:
            db = SessionLocal()
            should_close_db = True
        else:
            should_close_db = False
        
        try:
            folders = db.query(ContentFolder).all()
            
            total_folders = len(folders)
            total_videos = sum(folder.total_videos for folder in folders)
            active_folders = sum(1 for folder in folders if folder.is_active)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_stats = {}
            for folder in folders:
                category = folder.category
                if category not in categories_stats:
                    categories_stats[category] = {
                        'folders': 0,
                        'videos': 0,
                        'used_videos': 0
                    }
                
                categories_stats[category]['folders'] += 1
                categories_stats[category]['videos'] += folder.total_videos
                categories_stats[category]['used_videos'] += folder.used_videos
            
            # –¢–æ–ø –ø–∞–ø–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ
            top_folders = sorted(
                [(f.name, f.total_videos, f.category) for f in folders],
                key=lambda x: x[1],
                reverse=True
            )[:10]
            
            return {
                'total_folders': total_folders,
                'active_folders': active_folders,
                'total_videos': total_videos,
                'categories': categories_stats,
                'top_folders': top_folders,
                'average_videos_per_folder': total_videos / max(total_folders, 1)
            }
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {}
        finally:
            if should_close_db:
                db.close()
    
    async def validate_video_file(self, file_path: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        try:
            file_path_obj = Path(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if not file_path_obj.exists():
                return False, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if file_path_obj.suffix.lower() not in settings.ALLOWED_VIDEO_EXTENSIONS:
                return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_path_obj.suffix}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            file_size = file_path_obj.stat().st_size
            max_size = settings.MAX_VIDEO_SIZE_MB * 1024 * 1024
            
            if file_size > max_size:
                return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / (1024*1024):.1f}MB"
            
            if file_size < 1024:  # –ú–∏–Ω–∏–º—É–º 1KB
                return False, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π"
            
            return True, "OK"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}" 