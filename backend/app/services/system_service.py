"""
MediaFlux Hub - System Service
–°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
"""
import logging
import psutil
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from pathlib import Path

from app.config import settings
from app.database import SessionLocal, Account, PostTask, SystemLog, SystemSettings

logger = logging.getLogger("mediaflux_hub.system")


class SystemService:
    """MediaFlux Hub - –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.is_running = False
        
        # –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._stats_cache = {}
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        self._last_cache_update = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.is_running:
            return
        
        logger.info("üöÄ MediaFlux Hub: –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
        
        self.is_running = True
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ –∑–∞–ø—É—Å–∫–µ
        await self.log_system_event("INFO", "MediaFlux Hub —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", {
            "start_time": self.start_time.isoformat(),
            "version": "1.0.0"
        })
        
        logger.info("‚úÖ MediaFlux Hub: –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.is_running:
            return
        
        logger.info("üõë MediaFlux Hub: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await self.log_system_event("INFO", "MediaFlux Hub —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", {
            "stop_time": datetime.now().isoformat(),
            "uptime_seconds": (datetime.now() - self.start_time).total_seconds()
        })
        
        self.is_running = False
        logger.info("‚úÖ MediaFlux Hub: –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_checks = {}
            overall_healthy = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_healthy = await self._check_database_health()
            health_checks['database'] = {
                'status': 'healthy' if db_healthy else 'unhealthy',
                'details': 'Database connection successful' if db_healthy else 'Database connection failed'
            }
            overall_healthy &= db_healthy
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            redis_healthy = await self._check_redis_health()
            health_checks['redis'] = {
                'status': 'healthy' if redis_healthy else 'unhealthy',
                'details': 'Redis connection successful' if redis_healthy else 'Redis connection failed'
            }
            # Redis –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram API
            instagram_healthy = await self._check_instagram_api_health()
            health_checks['instagram_api'] = {
                'status': 'healthy' if instagram_healthy else 'unhealthy',
                'details': 'Instagram API accessible' if instagram_healthy else 'Instagram API not accessible'
            }
            overall_healthy &= instagram_healthy
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            disk_healthy, disk_details = await self._check_disk_space()
            health_checks['disk_space'] = {
                'status': 'healthy' if disk_healthy else 'unhealthy',
                'details': disk_details
            }
            overall_healthy &= disk_healthy
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory_healthy, memory_details = await self._check_memory_usage()
            health_checks['memory_usage'] = {
                'status': 'healthy' if memory_healthy else 'unhealthy',
                'details': memory_details
            }
            overall_healthy &= memory_healthy
            
            return {
                'overall': overall_healthy,
                'timestamp': datetime.now().isoformat(),
                'uptime_seconds': (datetime.now() - self.start_time).total_seconds(),
                **health_checks
            }
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {
                'overall': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    async def _check_database_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = SessionLocal()
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            result = db.execute("SELECT 1").scalar()
            db.close()
            
            return result == 1
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    async def _check_redis_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ Redis –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è MediaFlux Hub: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def _check_instagram_api_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Instagram API"""
        try:
            timeout = aiohttp.ClientTimeout(total=10)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Graph API
                url = f"{settings.INSTAGRAM_BASE_URL}/{settings.INSTAGRAM_API_VERSION}/"
                
                async with session.get(url) as response:
                    return response.status in [200, 400]  # 400 - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è MediaFlux Hub: Instagram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def _check_disk_space(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        try:
            disk_usage = psutil.disk_usage('/')
            
            # –î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –≤ GB
            free_gb = disk_usage.free / (1024**3)
            total_gb = disk_usage.total / (1024**3)
            used_percent = (disk_usage.used / disk_usage.total) * 100
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ –º–µ–Ω–µ–µ 5GB –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 90%
            is_healthy = free_gb > 5 and used_percent < 90
            
            details = f"Free: {free_gb:.1f}GB, Used: {used_percent:.1f}%"
            
            return is_healthy, details
            
        except Exception as e:
            return False, f"Error checking disk space: {e}"
    
    async def _check_memory_usage(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            memory = psutil.virtual_memory()
            
            # –ü–∞–º—è—Ç—å –≤ GB
            total_gb = memory.total / (1024**3)
            available_gb = memory.available / (1024**3)
            used_percent = memory.percent
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 85% –ø–∞–º—è—Ç–∏
            is_healthy = used_percent < 85
            
            details = f"Available: {available_gb:.1f}GB, Used: {used_percent:.1f}%"
            
            return is_healthy, details
            
        except Exception as e:
            return False, f"Error checking memory: {e}"
    
    async def get_system_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self._last_cache_update and 
            (datetime.now() - self._last_cache_update).total_seconds() < self._cache_ttl):
            return self._stats_cache
        
        try:
            db = SessionLocal()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            total_accounts = db.query(Account).count()
            active_accounts = db.query(Account).filter(Account.status == 'active').count()
            limited_accounts = db.query(Account).filter(Account.status == 'limited').count()
            banned_accounts = db.query(Account).filter(Account.status == 'banned').count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            now = datetime.now()
            today = now.replace(hour=0, minute=0, second=0, microsecond=0)
            week_ago = now - timedelta(days=7)
            month_ago = now - timedelta(days=30)
            
            posts_today = db.query(PostTask).filter(
                PostTask.status == 'completed',
                PostTask.completed_at >= today
            ).count()
            
            posts_week = db.query(PostTask).filter(
                PostTask.status == 'completed',
                PostTask.completed_at >= week_ago
            ).count()
            
            posts_month = db.query(PostTask).filter(
                PostTask.status == 'completed',
                PostTask.completed_at >= month_ago
            ).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
            pending_tasks = db.query(PostTask).filter(PostTask.status == 'pending').count()
            processing_tasks = db.query(PostTask).filter(PostTask.status == 'processing').count()
            failed_tasks_today = db.query(PostTask).filter(
                PostTask.status == 'failed',
                PostTask.updated_at >= today
            ).count()
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            from app.database import ContentFolder
            content_stats = {}
            folders = db.query(ContentFolder).all()
            
            for folder in folders:
                category = folder.category
                if category not in content_stats:
                    content_stats[category] = {
                        'folders': 0,
                        'total_videos': 0,
                        'used_videos': 0
                    }
                
                content_stats[category]['folders'] += 1
                content_stats[category]['total_videos'] += folder.total_videos
                content_stats[category]['used_videos'] += folder.used_videos
            
            # –¢–æ–ø –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –ø–æ—Å—Ç–∞–º
            top_accounts = db.execute("""
                SELECT a.username, COUNT(pt.task_id) as posts_count
                FROM accounts a
                LEFT JOIN post_tasks pt ON a.id = pt.account_id 
                WHERE pt.status = 'completed' AND pt.completed_at >= ?
                GROUP BY a.id, a.username
                ORDER BY posts_count DESC
                LIMIT 10
            """, (week_ago,)).fetchall()
            
            stats = {
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                'system': {
                    'uptime_seconds': (now - self.start_time).total_seconds(),
                    'version': '1.0.0',
                    'status': 'running' if self.is_running else 'stopped'
                },
                
                # –ê–∫–∫–∞—É–Ω—Ç—ã
                'accounts': {
                    'total': total_accounts,
                    'active': active_accounts,
                    'limited': limited_accounts,
                    'banned': banned_accounts,
                    'error': total_accounts - active_accounts - limited_accounts - banned_accounts
                },
                
                # –ü–æ—Å—Ç—ã
                'posts': {
                    'today': posts_today,
                    'week': posts_week,
                    'month': posts_month,
                    'pending': pending_tasks,
                    'processing': processing_tasks,
                    'failed_today': failed_tasks_today
                },
                
                # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                'performance': {
                    'posts_per_day_avg': posts_week / 7,
                    'success_rate_today': (posts_today / max(posts_today + failed_tasks_today, 1)) * 100,
                    'active_accounts_ratio': (active_accounts / max(total_accounts, 1)) * 100
                },
                
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                'resources': {
                    'cpu_percent': cpu_percent,
                    'memory_percent': memory.percent,
                    'memory_available_gb': memory.available / (1024**3),
                    'disk_free_gb': disk.free / (1024**3),
                    'disk_used_percent': (disk.used / disk.total) * 100
                },
                
                # –ö–æ–Ω—Ç–µ–Ω—Ç
                'content': content_stats,
                
                # –¢–æ–ø –∞–∫–∫–∞—É–Ω—Ç—ã
                'top_accounts': [
                    {'username': row[0], 'posts_count': row[1]} 
                    for row in top_accounts
                ],
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
                'timestamp': now.isoformat()
            }
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._stats_cache = stats
            self._last_cache_update = now
            
            db.close()
            return stats
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def log_system_event(
        self, 
        level: str, 
        message: str, 
        details: Optional[Dict[str, Any]] = None,
        account_id: Optional[str] = None,
        task_id: Optional[str] = None,
        component: str = "system"
    ):
        """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥"""
        try:
            db = SessionLocal()
            
            log_entry = SystemLog(
                level=level,
                message=message,
                account_id=account_id,
                task_id=task_id,
                component=component,
                details=str(details) if details else None
            )
            
            db.add(log_entry)
            db.commit()
            db.close()
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥: {e}")
    
    async def get_system_logs(
        self, 
        limit: int = 100, 
        level: Optional[str] = None,
        component: Optional[str] = None,
        hours: int = 24
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            db = SessionLocal()
            
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = db.query(SystemLog)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            since = datetime.now() - timedelta(hours=hours)
            query = query.filter(SystemLog.created_at >= since)
            
            # –§–∏–ª—å—Ç—Ä—ã
            if level:
                query = query.filter(SystemLog.level == level)
            
            if component:
                query = query.filter(SystemLog.component == component)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ª–∏–º–∏—Ç
            logs = query.order_by(SystemLog.created_at.desc()).limit(limit).all()
            
            result = []
            for log in logs:
                result.append({
                    'id': log.id,
                    'level': log.level,
                    'message': log.message,
                    'component': log.component,
                    'account_id': log.account_id,
                    'task_id': log.task_id,
                    'details': log.details,
                    'created_at': log.created_at.isoformat()
                })
            
            db.close()
            return result
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
    
    async def get_system_setting(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            db = SessionLocal()
            
            setting = db.query(SystemSettings).filter(SystemSettings.key == key).first()
            
            if setting:
                db.close()
                return setting.value
            
            db.close()
            return default
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return default
    
    async def set_system_setting(self, key: str, value: str, description: str = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            db = SessionLocal()
            
            setting = db.query(SystemSettings).filter(SystemSettings.key == key).first()
            
            if setting:
                setting.value = value
                if description:
                    setting.description = description
                setting.updated_at = datetime.now()
            else:
                setting = SystemSettings(
                    key=key,
                    value=value,
                    description=description
                )
                db.add(setting)
            
            db.commit()
            db.close()
            
            logger.info(f"‚öôÔ∏è MediaFlux Hub: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {key} = {value}")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
    
    async def cleanup_old_logs(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            db = SessionLocal()
            
            cutoff_date = datetime.now() - timedelta(days=days)
            
            deleted_count = db.query(SystemLog).filter(
                SystemLog.created_at < cutoff_date
            ).count()
            
            db.query(SystemLog).filter(
                SystemLog.created_at < cutoff_date
            ).delete()
            
            db.commit()
            db.close()
            
            logger.info(f"üßπ MediaFlux Hub: –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    def get_service_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            'is_running': self.is_running,
            'start_time': self.start_time.isoformat() if self.is_running else None,
            'uptime_seconds': (datetime.now() - self.start_time).total_seconds() if self.is_running else 0
        } 