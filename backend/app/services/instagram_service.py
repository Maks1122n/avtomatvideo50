"""
MediaFlux Hub - Instagram API Service
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Instagram Graph API —Å –∞–Ω—Ç–∏–±–∞–Ω-–∑–∞—â–∏—Ç–æ–π
"""
import aiohttp
import asyncio
import logging
import random
from typing import Optional, Tuple, Dict, Any
from datetime import datetime, timedelta
import json

from app.config import settings
from app.database import SessionLocal, Account
from app.services.proxy_service import ProxyManager

logger = logging.getLogger("mediaflux_hub.instagram")


class MediaFluxHubAPIService:
    """–°–µ—Ä–≤–∏—Å MediaFlux Hub –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Instagram Graph API"""
    
    def __init__(self):
        self.base_url = f"{settings.INSTAGRAM_BASE_URL}/{settings.INSTAGRAM_API_VERSION}"
        self.proxy_manager = ProxyManager()
        self.user_agents = [
            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
        ]
    
    async def upload_reel(
        self, 
        account: Account, 
        video_url: str, 
        caption: str,
        share_to_feed: bool = True
    ) -> Tuple[bool, str]:
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ Reel –≤ MediaFlux Hub:
        1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        2. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        """
        try:
            logger.info(f"üì§ MediaFlux Hub: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É Reel –¥–ª—è @{account.username}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            proxy = await self.proxy_manager.get_proxy_for_account(account.id)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω—Ç–∏–±–∞–Ω –∑–∞–¥–µ—Ä–∂–∫–∏
            await self._apply_antiban_delay()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container_id = await self._create_container(
                account, video_url, caption, share_to_feed, proxy
            )
            
            if not container_id:
                return False, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
            
            logger.info(f"‚úÖ MediaFlux Hub: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω {container_id}")
            
            # –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if not await self._wait_for_processing(container_id, account.access_token, proxy):
                return False, "‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"
            
            logger.info(f"‚úÖ MediaFlux Hub: –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {container_id}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
            await asyncio.sleep(random.uniform(5, 15))
            
            # –ü—É–±–ª–∏–∫—É–µ–º
            media_id = await self._publish_container(container_id, account, proxy)
            
            if media_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                await self._update_account_last_post(account.id)
                
                logger.info(f"üéâ MediaFlux Hub: Reel —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: {media_id}")
                return True, media_id
            else:
                return False, "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Reel –¥–ª—è @{account.username}: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ Instagram
            await self._handle_instagram_error(e, account.id)
            
            return False, str(e)
    
    async def _create_container(
        self, 
        account: Account, 
        video_url: str, 
        caption: str, 
        share_to_feed: bool,
        proxy: Optional[str]
    ) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤–∏–¥–µ–æ"""
        url = f"{self.base_url}/{account.instagram_account_id}/media"
        
        headers = self._get_headers(account.user_agent)
        
        data = {
            'access_token': account.access_token,
            'caption': caption,
            'media_type': 'REELS',
            'video_url': video_url,
            'share_to_feed': share_to_feed,
            'thumb_offset': random.randint(1000, 5000)  # –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–≤—å—é
        }
        
        connector = aiohttp.TCPConnector(ssl=False)
        timeout = aiohttp.ClientTimeout(total=settings.UPLOAD_TIMEOUT)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers=headers
        ) as session:
            
            kwargs = {'data': data}
            if proxy:
                kwargs['proxy'] = proxy
            
            try:
                async with session.post(url, **kwargs) as response:
                    response_text = await response.text()
                    
                    if response.status == 200:
                        result = json.loads(response_text)
                        return result.get('id')
                    else:
                        error_data = json.loads(response_text) if response_text else {}
                        error_msg = error_data.get('error', {}).get('message', 'Unknown error')
                        
                        logger.error(f"üí• MediaFlux Hub: Instagram API Error: {response.status} - {error_msg}")
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting
                        if response.status == 429:
                            await self._handle_rate_limit(account.id)
                        
                        return None
                        
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ MediaFlux Hub: –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è @{account.username}")
                return None
            except Exception as e:
                logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
                return None
    
    async def _wait_for_processing(
        self, 
        container_id: str, 
        access_token: str,
        proxy: Optional[str],
        max_wait: int = 300
    ) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ Instagram"""
        url = f"{self.base_url}/{container_id}"
        params = {
            'access_token': access_token,
            'fields': 'status_code'
        }
        
        start_time = asyncio.get_event_loop().time()
        check_interval = 10  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        logger.info(f"‚è≥ MediaFlux Hub: –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_id}...")
        
        async with aiohttp.ClientSession() as session:
            while (asyncio.get_event_loop().time() - start_time) < max_wait:
                kwargs = {'params': params}
                if proxy:
                    kwargs['proxy'] = proxy
                
                try:
                    async with session.get(url, **kwargs) as response:
                        if response.status == 200:
                            result = await response.json()
                            status = result.get('status_code')
                            
                            logger.debug(f"üìä MediaFlux Hub: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_id}: {status}")
                            
                            if status == 'FINISHED':
                                logger.info(f"‚úÖ MediaFlux Hub: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                                return True
                            elif status == 'ERROR':
                                logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_id}")
                                return False
                            elif status in ['IN_PROGRESS', 'PUBLISHED']:
                                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                                pass
                            
                        else:
                            logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {response.status}")
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(check_interval)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                    await asyncio.sleep(check_interval)
        
        logger.error(f"‚è∞ MediaFlux Hub: –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_id}")
        return False
    
    async def _publish_container(
        self, 
        container_id: str, 
        account: Account,
        proxy: Optional[str]
    ) -> Optional[str]:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        url = f"{self.base_url}/{account.instagram_account_id}/media_publish"
        
        headers = self._get_headers(account.user_agent)
        
        data = {
            'access_token': account.access_token,
            'creation_id': container_id
        }
        
        async with aiohttp.ClientSession(headers=headers) as session:
            kwargs = {'data': data}
            if proxy:
                kwargs['proxy'] = proxy
            
            try:
                async with session.post(url, **kwargs) as response:
                    response_text = await response.text()
                    
                    if response.status == 200:
                        result = json.loads(response_text)
                        media_id = result.get('id')
                        
                        if media_id:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
                            instagram_url = f"https://www.instagram.com/p/{media_id}/"
                            logger.info(f"üîó MediaFlux Hub: –ü–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {instagram_url}")
                        
                        return media_id
                    else:
                        error_data = json.loads(response_text) if response_text else {}
                        error_msg = error_data.get('error', {}).get('message', 'Unknown error')
                        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status} - {error_msg}")
                        return None
                        
            except Exception as e:
                logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                return None
    
    async def get_media_insights(
        self, 
        media_id: str, 
        account: Account,
        proxy: Optional[str] = None
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞"""
        url = f"{self.base_url}/{media_id}/insights"
        
        params = {
            'access_token': account.access_token,
            'metric': 'impressions,reach,likes,comments,shares,saves,profile_visits,follows'
        }
        
        headers = self._get_headers(account.user_agent)
        
        async with aiohttp.ClientSession(headers=headers) as session:
            kwargs = {'params': params}
            if proxy:
                kwargs['proxy'] = proxy
            
            try:
                async with session.get(url, **kwargs) as response:
                    if response.status == 200:
                        result = await response.json()
                        insights_data = {}
                        
                        for insight in result.get('data', []):
                            metric = insight.get('name')
                            values = insight.get('values', [])
                            if values:
                                insights_data[metric] = values[0].get('value', 0)
                        
                        return insights_data
                    else:
                        logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {response.status}")
                        return None
                        
            except Exception as e:
                logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                return None
    
    def _get_headers(self, user_agent: Optional[str] = None) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
        headers = {
            'User-Agent': user_agent or random.choice(self.user_agents),
            'Accept': 'application/json',
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        return headers
    
    async def _apply_antiban_delay(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω—Ç–∏–±–∞–Ω –∑–∞–¥–µ—Ä–∂–µ–∫"""
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É 2-8 —Å–µ–∫—É–Ω–¥
        delay = random.uniform(2, 8)
        logger.debug(f"‚è≥ MediaFlux Hub: –ê–Ω—Ç–∏–±–∞–Ω –∑–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay)
    
    async def _handle_rate_limit(self, account_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting"""
        logger.warning(f"üö´ MediaFlux Hub: Rate limit –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
        
        db = SessionLocal()
        try:
            account = db.query(Account).filter(Account.id == account_id).first()
            if account:
                account.status = 'limited'
                account.updated_at = datetime.now()
                db.commit()
        finally:
            db.close()
    
    async def _handle_instagram_error(self, error: Exception, account_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Instagram API"""
        error_str = str(error).lower()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if 'rate limit' in error_str or '429' in error_str:
            await self._handle_rate_limit(account_id)
        elif 'permission' in error_str or '403' in error_str:
            await self._mark_account_error(account_id, 'permission_error')
        elif 'invalid token' in error_str or '401' in error_str:
            await self._mark_account_error(account_id, 'invalid_token')
    
    async def _mark_account_error(self, account_id: str, error_type: str):
        """–û—Ç–º–µ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ—à–∏–±–∫–æ–π"""
        db = SessionLocal()
        try:
            account = db.query(Account).filter(Account.id == account_id).first()
            if account:
                account.status = 'error'
                account.updated_at = datetime.now()
                db.commit()
                
                logger.error(f"üí• MediaFlux Hub: –ê–∫–∫–∞—É–Ω—Ç {account.username} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ error: {error_type}")
        finally:
            db.close()
    
    async def _update_account_last_post(self, account_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        db = SessionLocal()
        try:
            account = db.query(Account).filter(Account.id == account_id).first()
            if account:
                account.last_post_time = datetime.now()
                account.last_activity = datetime.now()
                account.current_daily_posts += 1
                account.updated_at = datetime.now()
                db.commit()
        finally:
            db.close()


class AntiBanManager:
    """MediaFlux Hub - –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω—Ç–∏–±–∞–Ω-–∑–∞—â–∏—Ç—ã"""
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    MIN_DELAY_BETWEEN_POSTS = settings.MIN_DELAY_BETWEEN_POSTS  # 30 –º–∏–Ω—É—Ç
    MAX_DELAY_BETWEEN_POSTS = settings.MAX_DELAY_BETWEEN_POSTS  # 2 —á–∞—Å–∞
    
    # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    DAILY_LIMITS = settings.DAILY_LIMITS
    
    @staticmethod
    async def can_post_now(account: Account) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–Ω—Ç–∏–±–∞–Ω-–ø—Ä–∞–≤–∏–ª"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
        if account.status != 'active':
            return False, f"–ê–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {account.status}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if account.current_daily_posts >= account.daily_limit:
            return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({account.daily_limit})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if account.last_post_time:
            time_diff = (datetime.now() - account.last_post_time).total_seconds()
            
            if time_diff < AntiBanManager.MIN_DELAY_BETWEEN_POSTS:
                wait_minutes = int((AntiBanManager.MIN_DELAY_BETWEEN_POSTS - time_diff) / 60)
                return False, f"–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ. –ñ–¥–∏—Ç–µ {wait_minutes} –º–∏–Ω—É—Ç"
        
        return True, "OK"
    
    @staticmethod
    def randomize_posting_time(base_time: datetime) -> datetime:
        """–†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (¬±30 –º–∏–Ω—É—Ç)"""
        offset_minutes = random.randint(-30, 30)
        return base_time + timedelta(minutes=offset_minutes)
    
    @staticmethod
    def get_account_type_limit(account_age_days: int) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
        if account_age_days < 30:
            return AntiBanManager.DAILY_LIMITS['new_account']
        elif account_age_days < 90:
            return AntiBanManager.DAILY_LIMITS['normal_account']
        elif account_age_days < 365:
            return AntiBanManager.DAILY_LIMITS['trusted_account']
        else:
            return AntiBanManager.DAILY_LIMITS['premium_account'] 