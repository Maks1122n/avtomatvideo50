"""
MediaFlux Hub - Scheduler Service
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –∞–Ω—Ç–∏–±–∞–Ω-–∑–∞—â–∏—Ç–æ–π
"""
import logging
import asyncio
import random
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor

from app.config import settings
from app.database import SessionLocal, Account, PostTask, ContentFolder
from app.services.instagram_service import MediaFluxHubAPIService, AntiBanManager
from app.services.content_service import MediaFluxContentService

logger = logging.getLogger("mediaflux_hub.scheduler")


class MediaFluxHubScheduler:
    """MediaFlux Hub - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ APScheduler
        jobstores = {
            'default': MemoryJobStore()
        }
        executors = {
            'default': AsyncIOExecutor()
        }
        job_defaults = {
            'coalesce': False,
            'max_instances': 3
        }
        
        self.scheduler = AsyncIOScheduler(
            jobstores=jobstores,
            executors=executors,
            job_defaults=job_defaults
        )
        
        self.instagram_service = MediaFluxHubAPIService()
        self.content_service = MediaFluxContentService()
        self.antiban_manager = AntiBanManager()
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'posts_scheduled': 0,
            'posts_completed': 0,
            'posts_failed': 0,
            'last_schedule_generation': None,
            'active_tasks': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ MediaFlux Hub"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è MediaFlux Hub: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            logger.info("üöÄ MediaFlux Hub: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 00:00
            self.scheduler.add_job(
                self.generate_weekly_schedule,
                CronTrigger(day_of_week=6, hour=0, minute=0),  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                id="weekly_schedule_generation",
                replace_existing=True
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
            self.scheduler.add_job(
                self.process_posting_queue,
                'interval',
                minutes=2,
                id="posting_queue_processor",
                replace_existing=True
            )
            
            # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
            self.scheduler.add_job(
                self.reset_daily_limits,
                CronTrigger(hour=0, minute=1),
                id="daily_limits_reset",
                replace_existing=True
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            self.scheduler.add_job(
                self.update_post_statistics,
                'interval',
                minutes=30,
                id="statistics_updater",
                replace_existing=True
            )
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            self.scheduler.add_job(
                self.cleanup_old_data,
                CronTrigger(hour=2, minute=0),
                id="data_cleanup",
                replace_existing=True
            )
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
            self.scheduler.add_job(
                self.scan_content_folders,
                'interval',
                hours=6,
                id="content_scanner",
                replace_existing=True
            )
            
            self.scheduler.start()
            self.is_running = True
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await self.generate_weekly_schedule()
            
            logger.info("‚úÖ MediaFlux Hub: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            return
        
        logger.info("üõë MediaFlux Hub: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        
        try:
            self.scheduler.shutdown(wait=False)
            self.is_running = False
            logger.info("‚úÖ MediaFlux Hub: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def generate_weekly_schedule(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        logger.info("üìÖ MediaFlux Hub: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        try:
            db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            accounts = db.query(Account).filter(Account.status == 'active').all()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            folders = db.query(ContentFolder).filter(ContentFolder.is_active == True).all()
            
            if not accounts:
                logger.warning("‚ö†Ô∏è MediaFlux Hub: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            if not folders:
                logger.warning("‚ö†Ô∏è MediaFlux Hub: –ù–µ—Ç –ø–∞–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ pending –∑–∞–¥–∞—á–∏
            db.query(PostTask).filter(PostTask.status == 'pending').delete()
            db.commit()
            
            total_tasks = 0
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            for account in accounts:
                logger.info(f"üìã MediaFlux Hub: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è @{account.username}")
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                for day_offset in range(7):
                    target_date = datetime.now() + timedelta(days=day_offset)
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
                    if target_date.date() < datetime.now().date():
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –¥–µ–Ω—å
                    daily_posts = self._calculate_daily_posts(account, target_date)
                    
                    if daily_posts == 0:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                    day_tasks = await self._create_daily_tasks(
                        account, target_date, daily_posts, folders, db
                    )
                    
                    total_tasks += len(day_tasks)
                    
                    logger.debug(f"üìù MediaFlux Hub: {len(day_tasks)} –∑–∞–¥–∞—á –¥–ª—è @{account.username} –Ω–∞ {target_date.strftime('%Y-%m-%d')}")
            
            db.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['posts_scheduled'] = total_tasks
            self.stats['last_schedule_generation'] = datetime.now()
            
            logger.info(f"‚úÖ MediaFlux Hub: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_tasks} –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–¥–µ–ª—é")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            if 'db' in locals():
                db.rollback()
        finally:
            if 'db' in locals():
                db.close()
    
    def _calculate_daily_posts(self, account: Account, target_date: datetime) -> int:
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        
        # –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        base_posts = min(account.daily_limit, settings.MAX_DAILY_POSTS_PER_ACCOUNT)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday = target_date.weekday()
        
        if weekday in [5, 6]:  # –í—ã—Ö–æ–¥–Ω—ã–µ
            return max(1, int(base_posts * 0.7))  # –£–º–µ–Ω—å—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö
        elif weekday in [0, 3]:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ - –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
            return min(account.daily_limit, int(base_posts * 1.2))
        else:
            return random.randint(max(1, base_posts - 1), base_posts)
    
    async def _create_daily_tasks(
        self, 
        account: Account, 
        target_date: datetime, 
        posts_count: int,
        folders: List[ContentFolder],
        db
    ) -> List[PostTask]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å"""
        
        tasks = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        posting_times = self._generate_posting_times(target_date, posts_count)
        
        for post_time in posting_times:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞–ø–∫—É —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            folder = random.choice(folders)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            video_path = await self.content_service.get_unused_video(
                folder.folder_id, account.id, db
            )
            
            if not video_path:
                logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ù–µ—Ç –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ {folder.name} –¥–ª—è @{account.username}")
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = await self.content_service.generate_unique_caption(
                folder.name, video_path
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = PostTask(
                account_id=account.id,
                video_path=video_path,
                generated_caption=caption,
                folder_id=folder.folder_id,
                scheduled_time=post_time,
                status='pending'
            )
            
            db.add(task)
            tasks.append(task)
        
        return tasks
    
    def _generate_posting_times(self, target_date: datetime, posts_count: int) -> List[datetime]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è Instagram (–ø–æ —á–∞—Å–∞–º)
        optimal_hours = [
            (9, 11),    # –£—Ç—Ä–æ
            (13, 15),   # –û–±–µ–¥  
            (17, 19),   # –í–µ—á–µ—Ä
            (20, 22)    # –ù–æ—á—å
        ]
        
        posting_times = []
        
        for i in range(posts_count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
            start_hour, end_hour = random.choice(optimal_hours)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
            hour = random.randint(start_hour, end_hour - 1)
            minute = random.randint(0, 59)
            
            post_time = target_date.replace(
                hour=hour, 
                minute=minute, 
                second=random.randint(0, 59),
                microsecond=0
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω—Ç–∏–±–∞–Ω-—Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é
            post_time = self.antiban_manager.randomize_posting_time(post_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if post_time > datetime.now():
                posting_times.append(post_time)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        posting_times.sort()
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        adjusted_times = []
        last_time = None
        
        for post_time in posting_times:
            if last_time:
                time_diff = (post_time - last_time).total_seconds()
                if time_diff < settings.MIN_DELAY_BETWEEN_POSTS:
                    # –°–¥–≤–∏–≥–∞–µ–º –≤—Ä–µ–º—è
                    post_time = last_time + timedelta(seconds=settings.MIN_DELAY_BETWEEN_POSTS)
            
            adjusted_times.append(post_time)
            last_time = post_time
        
        return adjusted_times
    
    async def process_posting_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        try:
            db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
            current_time = datetime.now()
            ready_tasks = db.query(PostTask).filter(
                PostTask.status == 'pending',
                PostTask.scheduled_time <= current_time
            ).order_by(PostTask.scheduled_time.asc()).limit(10).all()
            
            if not ready_tasks:
                return
            
            logger.info(f"üì§ MediaFlux Hub: –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(ready_tasks)} –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–º–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
            semaphore = asyncio.Semaphore(3)
            tasks = [
                self._process_single_task(task, semaphore) 
                for task in ready_tasks
            ]
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = sum(1 for r in results if r is True)
            failed_count = len(results) - success_count
            
            self.stats['posts_completed'] += success_count
            self.stats['posts_failed'] += failed_count
            
            if success_count > 0:
                logger.info(f"‚úÖ MediaFlux Hub: –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {success_count} –ø–æ—Å—Ç–æ–≤")
            
            if failed_count > 0:
                logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {failed_count} –ø–æ—Å—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
        finally:
            if 'db' in locals():
                db.close()
    
    async def _process_single_task(self, task: PostTask, semaphore: asyncio.Semaphore) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        async with semaphore:
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                account = db.query(Account).filter(Account.id == task.account_id).first()
                if not account:
                    await self._mark_task_failed(task.task_id, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", db)
                    return False
                
                logger.info(f"üì§ MediaFlux Hub: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è @{account.username}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∞–Ω—Ç–∏–±–∞–Ω)
                can_post, reason = await self.antiban_manager.can_post_now(account)
                if not can_post:
                    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 30 –º–∏–Ω—É—Ç
                    new_time = datetime.now() + timedelta(minutes=30)
                    await self._reschedule_task(task.task_id, new_time, reason, db)
                    return False
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
                task.status = 'processing'
                task.attempts += 1
                task.updated_at = datetime.now()
                db.commit()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥
                video_url = await self.content_service.upload_to_public_storage(task.video_path)
                
                if not video_url:
                    await self._mark_task_failed(task.task_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ", db)
                    return False
                
                # –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ Instagram API
                success, result = await self.instagram_service.upload_reel(
                    account=account,
                    video_url=video_url,
                    caption=task.generated_caption,
                    share_to_feed=True
                )
                
                if success:
                    # –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                    task.status = 'completed'
                    task.media_id = result
                    task.instagram_url = f"https://www.instagram.com/p/{result}/"
                    task.completed_at = datetime.now()
                    task.updated_at = datetime.now()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account.current_daily_posts += 1
                    account.last_post_time = datetime.now()
                    account.last_activity = datetime.now()
                    account.updated_at = datetime.now()
                    
                    db.commit()
                    
                    logger.info(f"üéâ MediaFlux Hub: Reel –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! @{account.username} -> {result}")
                    return True
                else:
                    # –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    if task.attempts >= task.max_attempts:
                        await self._mark_task_failed(task.task_id, result, db)
                    else:
                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ —á–∞—Å
                        retry_time = datetime.now() + timedelta(hours=1)
                        await self._reschedule_task(task.task_id, retry_time, result, db)
                    
                    return False
                
            except Exception as e:
                logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.task_id}: {e}")
                await self._mark_task_failed(task.task_id, str(e), db)
                return False
            finally:
                db.close()
    
    async def _mark_task_failed(self, task_id: str, error_message: str, db):
        """–û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–π"""
        task = db.query(PostTask).filter(PostTask.task_id == task_id).first()
        if task:
            task.status = 'failed'
            task.error_message = error_message
            task.updated_at = datetime.now()
            db.commit()
    
    async def _reschedule_task(self, task_id: str, new_time: datetime, reason: str, db):
        """–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"""
        task = db.query(PostTask).filter(PostTask.task_id == task_id).first()
        if task:
            task.scheduled_time = new_time
            task.status = 'pending'
            task.error_message = f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {reason}"
            task.updated_at = datetime.now()
            db.commit()
    
    async def reset_daily_limits(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        logger.info("üîÑ MediaFlux Hub: –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        try:
            db = SessionLocal()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å—Ç–æ–≤
            accounts = db.query(Account).all()
            reset_count = 0
            
            for account in accounts:
                account.current_daily_posts = 0
                account.updated_at = datetime.now()
                reset_count += 1
            
            db.commit()
            
            logger.info(f"‚úÖ MediaFlux Hub: –°–±—Ä–æ—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è {reset_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤: {e}")
            if 'db' in locals():
                db.rollback()
        finally:
            if 'db' in locals():
                db.close()
    
    async def update_post_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤"""
        logger.info("üìä MediaFlux Hub: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤...")
        
        try:
            db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            completed_tasks = db.query(PostTask).filter(
                PostTask.status == 'completed',
                PostTask.completed_at >= week_ago,
                PostTask.media_id.isnot(None)
            ).all()
            
            updated_count = 0
            
            for task in completed_tasks:
                try:
                    account = db.query(Account).filter(Account.id == task.account_id).first()
                    if not account:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Instagram API
                    insights = await self.instagram_service.get_media_insights(
                        task.media_id, account
                    )
                    
                    if insights:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        await self._update_task_statistics(task, insights, db)
                        updated_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(random.uniform(1, 3))
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {task.task_id}: {e}")
            
            logger.info(f"‚úÖ MediaFlux Hub: –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {updated_count} –ø–æ—Å—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            if 'db' in locals():
                db.close()
    
    async def _update_task_statistics(self, task: PostTask, insights: Dict[str, Any], db):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        from app.database import PostStatistics
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = db.query(PostStatistics).filter(PostStatistics.task_id == task.task_id).first()
        
        if not stats:
            stats = PostStatistics(task_id=task.task_id)
            db.add(stats)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        stats.impressions = insights.get('impressions', 0)
        stats.reach = insights.get('reach', 0)
        stats.likes = insights.get('likes', 0)
        stats.comments = insights.get('comments', 0)
        stats.shares = insights.get('shares', 0)
        stats.saves = insights.get('saves', 0)
        stats.profile_visits = insights.get('profile_visits', 0)
        stats.follows = insights.get('follows', 0)
        stats.updated_at = datetime.now()
        
        db.commit()
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üßπ MediaFlux Hub: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            db = SessionLocal()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            month_ago = datetime.now() - timedelta(days=30)
            from app.database import SystemLog
            
            old_logs_count = db.query(SystemLog).filter(
                SystemLog.created_at < month_ago
            ).count()
            
            db.query(SystemLog).filter(
                SystemLog.created_at < month_ago
            ).delete()
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            old_failed_tasks = db.query(PostTask).filter(
                PostTask.status == 'failed',
                PostTask.updated_at < week_ago
            ).count()
            
            db.query(PostTask).filter(
                PostTask.status == 'failed',
                PostTask.updated_at < week_ago
            ).delete()
            
            db.commit()
            
            logger.info(f"‚úÖ MediaFlux Hub: –£–¥–∞–ª–µ–Ω–æ {old_logs_count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –∏ {old_failed_tasks} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á")
            
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            if 'db' in locals():
                db.rollback()
        finally:
            if 'db' in locals():
                db.close()
    
    async def scan_content_folders(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        logger.info("üìÅ MediaFlux Hub: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º...")
        
        try:
            folders_scanned = await self.content_service.scan_content_folders()
            logger.info(f"‚úÖ MediaFlux Hub: –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(folders_scanned)} –ø–∞–ø–æ–∫")
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    def get_scheduler_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            'is_running': self.is_running,
            'scheduled_jobs': len(self.scheduler.get_jobs()) if self.is_running else 0,
            **self.stats
        } 