"""
MediaFlux Hub - Proxies API
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""
import logging
from datetime import datetime
from typing import List, Optional, Dict, Any
from fastapi import APIRouter, Depends, HTTPException, Query
from pydantic import BaseModel

from app.config import settings
from app.database import SessionLocal, Proxy
from app.api.auth import verify_token
from app.services.proxy_service import ProxyManager

logger = logging.getLogger("mediaflux_hub.proxies")

router = APIRouter()
proxy_manager = ProxyManager()

class ProxyResponse(BaseModel):
    id: int
    proxy_url: str
    country: Optional[str]
    city: Optional[str]
    is_active: bool
    error_count: int
    max_errors: int
    last_used: Optional[datetime]
    accounts_assigned: int
    max_accounts: int
    created_at: datetime
    updated_at: datetime

class ProxyStats(BaseModel):
    total: int
    active: int
    assigned: int
    available: int
    countries: Dict[str, Any]
    utilization: float

@router.get("/", response_model=List[ProxyResponse])
async def get_proxies(
    is_active: Optional[bool] = Query(None),
    country: Optional[str] = Query(None),
    current_user: dict = Depends(verify_token)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏"""
    try:
        db = SessionLocal()
        
        query = db.query(Proxy)
        
        if is_active is not None:
            query = query.filter(Proxy.is_active == is_active)
        
        if country:
            query = query.filter(Proxy.country == country)
        
        proxies = query.order_by(Proxy.created_at.desc()).all()
        
        result = [
            ProxyResponse(
                id=proxy.id,
                proxy_url=proxy.proxy_url,
                country=proxy.country,
                city=proxy.city,
                is_active=proxy.is_active,
                error_count=proxy.error_count,
                max_errors=proxy.max_errors,
                last_used=proxy.last_used,
                accounts_assigned=proxy.accounts_assigned,
                max_accounts=proxy.max_accounts,
                created_at=proxy.created_at,
                updated_at=proxy.updated_at
            )
            for proxy in proxies
        ]
        
        db.close()
        return result
        
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏")

@router.post("/sync")
async def sync_proxies(current_user: dict = Depends(verify_token)):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        await proxy_manager.sync_proxies_to_database()
        return {
            "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            "synced_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏")

@router.post("/test")
async def test_all_proxies(current_user: dict = Depends(verify_token)):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
    try:
        results = await proxy_manager.test_all_proxies()
        working_count = sum(1 for is_working in results.values() if is_working)
        
        return {
            "message": f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {working_count}/{len(results)}",
            "working_proxies": working_count,
            "total_proxies": len(results),
            "tested_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏")

@router.get("/stats", response_model=ProxyStats)
async def get_proxy_stats(current_user: dict = Depends(verify_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏"""
    try:
        stats = await proxy_manager.get_proxy_statistics()
        return ProxyStats(**stats)
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.delete("/{proxy_id}")
async def delete_proxy(
    proxy_id: int,
    current_user: dict = Depends(verify_token)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
    try:
        db = SessionLocal()
        
        proxy = db.query(Proxy).filter(Proxy.id == proxy_id).first()
        if not proxy:
            db.close()
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        proxy_url = proxy.proxy_url
        db.delete(proxy)
        db.commit()
        db.close()
        
        return {
            "message": f"–ü—Ä–æ–∫—Å–∏ {proxy_url} —É–¥–∞–ª–µ–Ω",
            "deleted_at": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏") 