"""
MediaFlux Hub - Accounts API  
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Instagram
"""
import logging
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from fastapi import APIRouter, Depends, HTTPException, status, Query
from pydantic import BaseModel, validator
from cryptography.fernet import Fernet

from app.config import settings
from app.database import SessionLocal, Account
from app.api.auth import verify_token
from app.services.proxy_service import ProxyManager
from app.services.instagram_service import MediaFluxHubAPIService

logger = logging.getLogger("mediaflux_hub.accounts")

router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
proxy_manager = ProxyManager()
instagram_service = MediaFluxHubAPIService()

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
encryption_key = settings.ENCRYPTION_KEY.encode()
cipher_suite = Fernet(encryption_key)

# Pydantic –º–æ–¥–µ–ª–∏
class AccountCreate(BaseModel):
    username: str
    access_token: str
    instagram_account_id: str
    daily_limit: Optional[int] = 5
    user_agent: Optional[str] = None
    
    @validator('username')
    def validate_username(cls, v):
        if not v or len(v) < 2:
            raise ValueError('Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
        return v.strip().lower()
    
    @validator('access_token')
    def validate_access_token(cls, v):
        if not v or len(v) < 10:
            raise ValueError('Access token —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')
        return v.strip()
    
    @validator('daily_limit')
    def validate_daily_limit(cls, v):
        if v is not None and (v < 1 or v > 20):
            raise ValueError('–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 20')
        return v

class AccountUpdate(BaseModel):
    daily_limit: Optional[int] = None
    user_agent: Optional[str] = None
    status: Optional[str] = None
    
    @validator('status')
    def validate_status(cls, v):
        if v is not None and v not in ['active', 'limited', 'banned', 'error']:
            raise ValueError('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞')
        return v

class AccountResponse(BaseModel):
    id: str
    username: str
    instagram_account_id: str
    daily_limit: int
    current_daily_posts: int
    status: str
    last_post_time: Optional[datetime]
    last_activity: Optional[datetime]
    proxy_url: Optional[str]
    created_at: datetime
    updated_at: datetime

class AccountStats(BaseModel):
    total_accounts: int
    active_accounts: int
    limited_accounts: int
    banned_accounts: int
    error_accounts: int
    posts_today: int
    posts_week: int

class AccountTest(BaseModel):
    success: bool
    message: str
    details: Optional[Dict[str, Any]] = None


def encrypt_token(token: str) -> str:
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    return cipher_suite.encrypt(token.encode()).decode()

def decrypt_token(encrypted_token: str) -> str:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    return cipher_suite.decrypt(encrypted_token.encode()).decode()


@router.get("/", response_model=List[AccountResponse])
async def get_accounts(
    status: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ username"),
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    current_user: dict = Depends(verify_token)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram"""
    logger.info(f"üìã MediaFlux Hub: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç {current_user['username']}")
    
    try:
        db = SessionLocal()
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = db.query(Account)
        
        # –§–∏–ª—å—Ç—Ä—ã
        if status:
            query = query.filter(Account.status == status)
        
        if search:
            query = query.filter(Account.username.contains(search.lower()))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        accounts = query.order_by(Account.created_at.desc()).offset(offset).limit(limit).all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = []
        for account in accounts:
            result.append(AccountResponse(
                id=account.id,
                username=account.username,
                instagram_account_id=account.instagram_account_id,
                daily_limit=account.daily_limit,
                current_daily_posts=account.current_daily_posts,
                status=account.status,
                last_post_time=account.last_post_time,
                last_activity=account.last_activity,
                proxy_url=account.proxy_url,
                created_at=account.created_at,
                updated_at=account.updated_at
            ))
        
        db.close()
        logger.info(f"‚úÖ MediaFlux Hub: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return result
        
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")


@router.post("/", response_model=AccountResponse)
async def create_account(
    account_data: AccountCreate,
    current_user: dict = Depends(verify_token)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
    logger.info(f"‚ûï MediaFlux Hub: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account_data.username} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user['username']}")
    
    try:
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
        existing = db.query(Account).filter(Account.username == account_data.username).first()
        if existing:
            db.close()
            raise HTTPException(
                status_code=400, 
                detail=f"–ê–∫–∫–∞—É–Ω—Ç @{account_data.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        # –®–∏—Ñ—Ä—É–µ–º access token
        encrypted_token = encrypt_token(account_data.access_token)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        account = Account(
            username=account_data.username,
            access_token=encrypted_token,
            instagram_account_id=account_data.instagram_account_id,
            daily_limit=account_data.daily_limit or 5,
            user_agent=account_data.user_agent,
            status='active'
        )
        
        db.add(account)
        db.commit()
        db.refresh(account)
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
        try:
            proxy_url = await proxy_manager.assign_proxy_to_account(account.id)
            if proxy_url:
                account.proxy_url = proxy_url
                db.commit()
                logger.info(f"üîó MediaFlux Hub: –ü—Ä–æ–∫—Å–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è @{account.username}")
        except Exception as proxy_error:
            logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏: {proxy_error}")
        
        result = AccountResponse(
            id=account.id,
            username=account.username,
            instagram_account_id=account.instagram_account_id,
            daily_limit=account.daily_limit,
            current_daily_posts=account.current_daily_posts,
            status=account.status,
            last_post_time=account.last_post_time,
            last_activity=account.last_activity,
            proxy_url=account.proxy_url,
            created_at=account.created_at,
            updated_at=account.updated_at
        )
        
        db.close()
        logger.info(f"‚úÖ MediaFlux Hub: –ê–∫–∫–∞—É–Ω—Ç @{account.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        if 'db' in locals():
            db.rollback()
            db.close()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")


@router.get("/{account_id}", response_model=AccountResponse)
async def get_account(
    account_id: str,
    current_user: dict = Depends(verify_token)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    logger.info(f"üìÑ MediaFlux Hub: –ó–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
    
    try:
        db = SessionLocal()
        
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            db.close()
            raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        result = AccountResponse(
            id=account.id,
            username=account.username,
            instagram_account_id=account.instagram_account_id,
            daily_limit=account.daily_limit,
            current_daily_posts=account.current_daily_posts,
            status=account.status,
            last_post_time=account.last_post_time,
            last_activity=account.last_activity,
            proxy_url=account.proxy_url,
            created_at=account.created_at,
            updated_at=account.updated_at
        )
        
        db.close()
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")


@router.put("/{account_id}", response_model=AccountResponse)
async def update_account(
    account_id: str,
    account_data: AccountUpdate,
    current_user: dict = Depends(verify_token)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    logger.info(f"‚úèÔ∏è MediaFlux Hub: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
    
    try:
        db = SessionLocal()
        
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            db.close()
            raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if account_data.daily_limit is not None:
            account.daily_limit = account_data.daily_limit
        
        if account_data.user_agent is not None:
            account.user_agent = account_data.user_agent
        
        if account_data.status is not None:
            old_status = account.status
            account.status = account_data.status
            logger.info(f"üìä MediaFlux Hub: –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username} –∏–∑–º–µ–Ω–µ–Ω: {old_status} -> {account_data.status}")
        
        account.updated_at = datetime.now()
        db.commit()
        
        result = AccountResponse(
            id=account.id,
            username=account.username,
            instagram_account_id=account.instagram_account_id,
            daily_limit=account.daily_limit,
            current_daily_posts=account.current_daily_posts,
            status=account.status,
            last_post_time=account.last_post_time,
            last_activity=account.last_activity,
            proxy_url=account.proxy_url,
            created_at=account.created_at,
            updated_at=account.updated_at
        )
        
        db.close()
        logger.info(f"‚úÖ MediaFlux Hub: –ê–∫–∫–∞—É–Ω—Ç @{account.username} –æ–±–Ω–æ–≤–ª–µ–Ω")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        if 'db' in locals():
            db.rollback()
            db.close()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")


@router.delete("/{account_id}")
async def delete_account(
    account_id: str,
    current_user: dict = Depends(verify_token)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    logger.info(f"üóëÔ∏è MediaFlux Hub: –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
    
    try:
        db = SessionLocal()
        
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            db.close()
            raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        username = account.username
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏
        if account.proxy_url:
            try:
                await proxy_manager._release_proxy_from_account(account.proxy_url, db)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è MediaFlux Hub: –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        db.delete(account)
        db.commit()
        db.close()
        
        logger.info(f"‚úÖ MediaFlux Hub: –ê–∫–∫–∞—É–Ω—Ç @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        
        return {
            "message": f"–ê–∫–∫–∞—É–Ω—Ç @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "deleted_at": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        if 'db' in locals():
            db.rollback()
            db.close()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")


@router.post("/{account_id}/test", response_model=AccountTest)
async def test_account(
    account_id: str,
    current_user: dict = Depends(verify_token)
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
    logger.info(f"üß™ MediaFlux Hub: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
    
    try:
        db = SessionLocal()
        
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            db.close()
            raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        try:
            access_token = decrypt_token(account.access_token)
        except Exception as e:
            logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            db.close()
            return AccountTest(
                success=False,
                message="–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞"
            )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Instagram API
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        test_details = {
            "account_id": account.instagram_account_id,
            "username": account.username,
            "proxy": account.proxy_url,
            "test_time": datetime.now().isoformat()
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        account.last_activity = datetime.now()
        account.updated_at = datetime.now()
        db.commit()
        db.close()
        
        logger.info(f"‚úÖ MediaFlux Hub: –¢–µ—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        return AccountTest(
            success=True,
            message=f"–ê–∫–∫–∞—É–Ω—Ç @{account.username} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            details=test_details
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        if 'db' in locals():
            db.close()
        return AccountTest(
            success=False,
            message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
        )


@router.get("/stats/summary", response_model=AccountStats)
async def get_accounts_stats(current_user: dict = Depends(verify_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    logger.info(f"üìä MediaFlux Hub: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    try:
        db = SessionLocal()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        total_accounts = db.query(Account).count()
        active_accounts = db.query(Account).filter(Account.status == 'active').count()
        limited_accounts = db.query(Account).filter(Account.status == 'limited').count()
        banned_accounts = db.query(Account).filter(Account.status == 'banned').count()
        error_accounts = db.query(Account).filter(Account.status == 'error').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
        from app.database import PostTask
        
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        week_ago = datetime.now() - timedelta(days=7)
        
        posts_today = db.query(PostTask).filter(
            PostTask.status == 'completed',
            PostTask.completed_at >= today
        ).count()
        
        posts_week = db.query(PostTask).filter(
            PostTask.status == 'completed',
            PostTask.completed_at >= week_ago
        ).count()
        
        result = AccountStats(
            total_accounts=total_accounts,
            active_accounts=active_accounts,
            limited_accounts=limited_accounts,
            banned_accounts=banned_accounts,
            error_accounts=error_accounts,
            posts_today=posts_today,
            posts_week=posts_week
        )
        
        db.close()
        return result
        
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        if 'db' in locals():
            db.close()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.post("/{account_id}/reset-daily-limit")
async def reset_account_daily_limit(
    account_id: str,
    current_user: dict = Depends(verify_token)
):
    """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    logger.info(f"üîÑ MediaFlux Hub: –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
    
    try:
        db = SessionLocal()
        
        account = db.query(Account).filter(Account.id == account_id).first()
        if not account:
            db.close()
            raise HTTPException(status_code=404, detail="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        old_count = account.current_daily_posts
        account.current_daily_posts = 0
        account.updated_at = datetime.now()
        db.commit()
        db.close()
        
        logger.info(f"‚úÖ MediaFlux Hub: –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è @{account.username}: {old_count} -> 0")
        
        return {
            "message": f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è @{account.username}",
            "previous_count": old_count,
            "reset_at": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {e}")
        if 'db' in locals():
            db.close()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞") 