"""
MediaFlux Hub - Content API
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
"""
import logging
from datetime import datetime
from typing import List, Optional, Dict, Any
from fastapi import APIRouter, Depends, HTTPException, File, UploadFile, Form
from pydantic import BaseModel

from app.config import settings
from app.database import SessionLocal, ContentFolder
from app.api.auth import verify_token
from app.services.content_service import MediaFluxContentService

logger = logging.getLogger("mediaflux_hub.content")

router = APIRouter()
content_service = MediaFluxContentService()

# Pydantic –º–æ–¥–µ–ª–∏
class FolderResponse(BaseModel):
    folder_id: str
    name: str
    path: str
    total_videos: int
    used_videos: int
    posts_per_week: int
    category: str
    is_active: bool
    created_at: datetime
    updated_at: datetime

class ContentStats(BaseModel):
    total_folders: int
    active_folders: int
    total_videos: int
    categories: Dict[str, Any]
    top_folders: List[tuple]
    average_videos_per_folder: float


@router.get("/folders", response_model=List[FolderResponse])
async def get_content_folders(current_user: dict = Depends(verify_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    logger.info(f"üìÅ MediaFlux Hub: –ó–∞–ø—Ä–æ—Å –ø–∞–ø–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç {current_user['username']}")
    
    try:
        db = SessionLocal()
        folders = db.query(ContentFolder).order_by(ContentFolder.created_at.desc()).all()
        
        result = [
            FolderResponse(
                folder_id=folder.folder_id,
                name=folder.name,
                path=folder.path,
                total_videos=folder.total_videos,
                used_videos=folder.used_videos,
                posts_per_week=folder.posts_per_week,
                category=folder.category,
                is_active=folder.is_active,
                created_at=folder.created_at,
                updated_at=folder.updated_at
            )
            for folder in folders
        ]
        
        db.close()
        return result
        
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")


@router.post("/scan")
async def scan_content_folders(current_user: dict = Depends(verify_token)):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    logger.info(f"üîç MediaFlux Hub: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç {current_user['username']}")
    
    try:
        db = SessionLocal()
        folders = await content_service.scan_content_folders(db)
        db.close()
        
        return {
            "message": f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(folders)} –ø–∞–ø–æ–∫",
            "folders_count": len(folders),
            "scanned_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")


@router.get("/stats", response_model=ContentStats)
async def get_content_stats(current_user: dict = Depends(verify_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        db = SessionLocal()
        stats = await content_service.get_content_statistics(db)
        db.close()
        
        return ContentStats(**stats)
        
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.delete("/folders/{folder_id}")
async def delete_content_folder(
    folder_id: str,
    current_user: dict = Depends(verify_token)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    logger.info(f"üóëÔ∏è MediaFlux Hub: –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ {folder_id}")
    
    try:
        db = SessionLocal()
        
        folder = db.query(ContentFolder).filter(ContentFolder.folder_id == folder_id).first()
        if not folder:
            db.close()
            raise HTTPException(status_code=404, detail="–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        folder_name = folder.name
        db.delete(folder)
        db.commit()
        db.close()
        
        return {
            "message": f"–ü–∞–ø–∫–∞ {folder_name} —É–¥–∞–ª–µ–Ω–∞",
            "deleted_at": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• MediaFlux Hub: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏") 