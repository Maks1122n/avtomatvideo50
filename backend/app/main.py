# üî• RENDER FORCE UPDATE - 2024-12-19-22:10:00 - STATIC PATH HOTFIX  
# TIMESTAMP: 1734637200 - CRITICAL PATH FIX
# MediaFlux Hub - Instagram Automation Platform
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç API –º–æ–¥—É–ª–µ–π
try:
    from app.api import dashboard, accounts, content, tasks
    API_AVAILABLE = True
    logger.info("‚úÖ All API modules imported successfully")
except ImportError as e:
    logger.error(f"‚ùå Failed to import API modules: {e}")
    API_AVAILABLE = False

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ MediaFlux Hub –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    if API_AVAILABLE:
        logger.info("‚úÖ API endpoints –∞–∫—Ç–∏–≤–Ω—ã")
    else:
        logger.warning("‚ö†Ô∏è API endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    yield
    logger.info("üõë MediaFlux Hub –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="MediaFlux Hub",
    description="Instagram Reels Automation Platform", 
    version="1.0.0",
    lifespan=lifespan
)

# –®–∞–±–ª–æ–Ω—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨
templates = Jinja2Templates(directory="../templates")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨  
app.mount("/static", StaticFiles(directory="../static"), name="static")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if API_AVAILABLE:
    app.include_router(dashboard.router, prefix="/api/dashboard", tags=["Dashboard"])
    app.include_router(accounts.router, prefix="/api/accounts", tags=["Accounts"]) 
    app.include_router(content.router, prefix="/api/content", tags=["Content"])
    app.include_router(tasks.router, prefix="/api/tasks", tags=["Tasks"])
    logger.info("‚úÖ All API routers connected")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
@app.get("/", response_class=HTMLResponse)
async def dashboard_redirect():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –≥–ª–∞–≤–Ω—É—é"""
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="/content", status_code=302)

# –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_page(request: Request):
    return templates.TemplateResponse("dashboard.html", {"request": request})

# –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@app.get("/accounts", response_class=HTMLResponse)
async def accounts_page(request: Request):
    return templates.TemplateResponse("accounts.html", {"request": request})

@app.get("/content", response_class=HTMLResponse)
async def content_page(request: Request):
    return templates.TemplateResponse("content.html", {"request": request})

@app.get("/schedule", response_class=HTMLResponse)  
async def schedule_page(request: Request):
    return templates.TemplateResponse("schedule.html", {"request": request})

@app.get("/analytics", response_class=HTMLResponse)
async def analytics_page(request: Request):
    return templates.TemplateResponse("analytics.html", {"request": request})

@app.get("/proxies", response_class=HTMLResponse)
async def proxies_page(request: Request):
    return templates.TemplateResponse("proxies.html", {"request": request})

@app.get("/settings", response_class=HTMLResponse)
async def settings_page(request: Request):
    return templates.TemplateResponse("settings.html", {"request": request})

# üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–°–¢–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
@app.get("/test-buttons", response_class=HTMLResponse)
async def test_buttons_page(request: Request):
    return templates.TemplateResponse("test-buttons.html", {"request": request})

# Health check
@app.get("/health")
async def health_check():
    import datetime
    return {
        "status": "healthy",
        "service": "MediaFlux Hub",
        "version": "1.0.0",
        "api_available": API_AVAILABLE,
        "timestamp": datetime.datetime.now().isoformat(),
        "deployment_id": "TEST_BUTTONS_FORCE_UPDATE_001",
        "test_page_available": True
    }

# Favicon
@app.get("/favicon.ico")
async def favicon():
    """Favicon"""
    return {"message": "No favicon"} 