"""
MediaFlux Hub - Instagram Reels Automation Platform
Main FastAPI Application
Updated: 2024-12-19 for Render.com deployment
"""
import os
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
if ENVIRONMENT == "production":
    # Production –ø—É—Ç–∏ (Render.com)
    TEMPLATES_DIR = "templates"
    STATIC_DIR = "static"
    logger.info("üåê PRODUCTION MODE: Render.com deployment")
else:
    # Development –ø—É—Ç–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
    TEMPLATES_DIR = "../templates"
    STATIC_DIR = "../static"
    logger.info("üíª DEVELOPMENT MODE: Local development")

logger.info(f"üåç Environment: {ENVIRONMENT}")
logger.info(f"üìÅ Templates directory: {TEMPLATES_DIR}")
logger.info(f"üé® Static directory: {STATIC_DIR}")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ MediaFlux Hub –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("‚úÖ MediaFlux Hub —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        yield
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise
    finally:
        logger.info("üõë MediaFlux Hub –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="MediaFlux Hub",
    description="Instagram Reels Automation Platform",
    version="1.0.0",
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Health check –¥–ª—è Render
@app.get("/health")
async def health_check():
    """Health check endpoint –¥–ª—è Render"""
    return {
        "status": "healthy",
        "service": "MediaFlux Hub",
        "version": "1.0.0"
    }

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")

# –ò–º–ø–æ—Ä—Ç API —Ä–æ—É—Ç–µ—Ä–æ–≤
try:
    from app.api import dashboard, accounts, content, tasks
    API_AVAILABLE = True
except ImportError as e:
    logger.warning(f"API modules not available, running in limited mode: {e}")
    API_AVAILABLE = False

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
@app.get("/", response_class=HTMLResponse)
async def dashboard_page(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ MediaFlux Hub Dashboard"""
    return templates.TemplateResponse("dashboard.html", {"request": request})

@app.get("/accounts", response_class=HTMLResponse)
async def accounts_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    return templates.TemplateResponse("accounts.html", {"request": request})

@app.get("/content", response_class=HTMLResponse)  
async def content_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    return templates.TemplateResponse("content.html", {"request": request})

@app.get("/schedule", response_class=HTMLResponse)
async def schedule_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return templates.TemplateResponse("schedule.html", {"request": request})

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤
if API_AVAILABLE:
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ API —Ä–æ—É—Ç–µ—Ä—ã
    app.include_router(dashboard.router, prefix="/api/dashboard", tags=["Dashboard"])
    app.include_router(accounts.router, prefix="/api/accounts", tags=["Accounts"])
    app.include_router(content.router, prefix="/api/content", tags=["Content"])
    app.include_router(tasks.router, prefix="/api/tasks", tags=["Tasks"])
    logger.info("‚úÖ All API endpoints loaded successfully")
else:
    logger.warning("‚ö†Ô∏è Running without API endpoints")

# API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@app.get("/api")
async def api_root():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return {
        "message": "MediaFlux Hub API", 
        "version": "1.0.0",
        "environment": ENVIRONMENT,
        "docs": "/docs",
        "health": "/health",
        "endpoints": {
            "dashboard": "/api/dashboard",
            "accounts": "/api/accounts", 
            "content": "/api/content",
            "tasks": "/api/tasks"
        } if API_AVAILABLE else "Limited mode - API not available"
    }

if __name__ == "__main__":
    import uvicorn
    print(f"üîÑ Starting MediaFlux Hub at {datetime.now()}")
    uvicorn.run(app, host="0.0.0.0", port=8000) 