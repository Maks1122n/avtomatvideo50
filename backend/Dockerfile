# MediaFlux Hub - Backend Dockerfile
# Multi-stage build –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–∞

# –°—Ç–∞–¥–∏—è 1: –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
FROM python:3.11-slim as base

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL maintainer="MediaFlux Hub Team"
LABEL version="1.0.0"
LABEL description="MediaFlux Hub - Instagram Reels Automation Platform"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    # –û—Å–Ω–æ–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    curl \
    wget \
    unzip \
    # –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Python –ø–∞–∫–µ—Ç–æ–≤
    gcc \
    g++ \
    make \
    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ
    libmagic1 \
    libmagic-dev \
    ffmpeg \
    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    libssl-dev \
    libffi-dev \
    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è PostgreSQL
    libpq-dev \
    # –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN groupadd -r mediaflux && useradd -r -g mediaflux -s /bin/bash mediaflux

# –°—Ç–∞–¥–∏—è 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
FROM base as dependencies

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –∏ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
RUN pip install --upgrade pip setuptools wheel

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt /tmp/requirements.txt

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN pip install -r /tmp/requirements.txt

# –°—Ç–∞–¥–∏—è 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
FROM base as final

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY --from=dependencies /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR /app

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
RUN mkdir -p \
    /app/logs \
    /app/content \
    /app/content/motivation \
    /app/content/lifestyle \
    /app/content/business \
    /app/content/entertainment \
    /app/proxies \
    /app/uploads \
    /app/backups

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY app/ /app/app/
COPY alembic/ /app/alembic/
COPY alembic.ini /app/alembic.ini

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ frontend
COPY ../frontend /app/frontend

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
RUN echo "-- MediaFlux Hub Database Initialization" > /app/init.sql && \
    echo "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" >> /app/init.sql && \
    echo "CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";" >> /app/init.sql

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
RUN chown -R mediaflux:mediaflux /app && \
    chmod +x /app && \
    chmod -R 755 /app/logs \
    /app/content \
    /app/proxies \
    /app/uploads \
    /app/backups

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
RUN echo "# MediaFlux Hub - Proxy Configuration" > /app/proxies/proxies.txt && \
    echo "# –§–æ—Ä–º–∞—Ç: protocol://user:pass@ip:port|Country|City" >> /app/proxies/proxies.txt && \
    echo "# –ü—Ä–∏–º–µ—Ä:" >> /app/proxies/proxies.txt && \
    echo "# http://user1:pass1@123.456.789.1:8080|US|New York" >> /app/proxies/proxies.txt && \
    echo "# http://user2:pass2@123.456.789.2:8080|UK|London" >> /app/proxies/proxies.txt && \
    echo "" >> /app/proxies/proxies.txt && \
    echo "# –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–∫—Å–∏ –∑–¥–µ—Å—å:" >> /app/proxies/proxies.txt

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
RUN echo '#!/bin/bash' > /app/start.sh && \
    echo 'set -e' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "üöÄ Starting MediaFlux Hub..."' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' >> /app/start.sh && \
    echo 'if [ "$DATABASE_URL" != "sqlite:///./mediaflux_hub.db" ]; then' >> /app/start.sh && \
    echo '  echo "‚è≥ Waiting for database..."' >> /app/start.sh && \
    echo '  python -c "' >> /app/start.sh && \
    echo 'import time' >> /app/start.sh && \
    echo 'import psycopg2' >> /app/start.sh && \
    echo 'import os' >> /app/start.sh && \
    echo 'import urllib.parse as urlparse' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'url = urlparse.urlparse(os.getenv(\"DATABASE_URL\"))' >> /app/start.sh && \
    echo 'for i in range(30):' >> /app/start.sh && \
    echo '    try:' >> /app/start.sh && \
    echo '        conn = psycopg2.connect(' >> /app/start.sh && \
    echo '            database=url.path[1:],' >> /app/start.sh && \
    echo '            user=url.username,' >> /app/start.sh && \
    echo '            password=url.password,' >> /app/start.sh && \
    echo '            host=url.hostname,' >> /app/start.sh && \
    echo '            port=url.port' >> /app/start.sh && \
    echo '        )' >> /app/start.sh && \
    echo '        conn.close()' >> /app/start.sh && \
    echo '        print(\"‚úÖ Database connected!\")' >> /app/start.sh && \
    echo '        break' >> /app/start.sh && \
    echo '    except:' >> /app/start.sh && \
    echo '        print(f\"‚è≥ Waiting for database... ({i+1}/30)\")' >> /app/start.sh && \
    echo '        time.sleep(2)' >> /app/start.sh && \
    echo 'else:' >> /app/start.sh && \
    echo '    print(\"‚ùå Database connection failed!\")' >> /app/start.sh && \
    echo '    exit(1)' >> /app/start.sh && \
    echo '"' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' >> /app/start.sh && \
    echo 'echo "üìä Initializing database..."' >> /app/start.sh && \
    echo 'python -c "from app.database import init_database; init_database()"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' >> /app/start.sh && \
    echo 'echo "üåê Starting MediaFlux Hub on port 8000..."' >> /app/start.sh && \
    echo 'exec uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers ${WORKERS:-1}' >> /app/start.sh && \
    chmod +x /app/start.sh

# –°–æ–∑–¥–∞–Ω–∏–µ healthcheck —Å–∫—Ä–∏–ø—Ç–∞
RUN echo '#!/bin/bash' > /app/healthcheck.sh && \
    echo 'curl -f http://localhost:8000/health || exit 1' >> /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER mediaflux

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ENV PYTHONPATH=/app \
    APP_ENV=production \
    PORT=8000

# –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Ä—Ç–∞
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
ENTRYPOINT ["/app/start.sh"]

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–∞
LABEL org.opencontainers.image.title="MediaFlux Hub Backend"
LABEL org.opencontainers.image.description="Backend service for MediaFlux Hub - Instagram Reels Automation Platform"
LABEL org.opencontainers.image.url="https://github.com/mediaflux-hub/mediaflux-hub"
LABEL org.opencontainers.image.source="https://github.com/mediaflux-hub/mediaflux-hub"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.created="2024-01-01T00:00:00Z"
LABEL org.opencontainers.image.licenses="MIT" 