/**
 * MediaFlux Hub - Main JavaScript
 * –ì–ª–∞–≤–Ω—ã–π JavaScript —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

class MediaFluxHub {
    constructor() {
        this.version = '1.0.0';
        this.isOnline = navigator.onLine;
        this.lastActivity = Date.now();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    init() {
        console.log(`üöÄ MediaFlux Hub v${this.version} - Instagram Reels Automation Platform`);
        
        this.setupGlobalErrorHandler();
        this.setupNetworkMonitoring();
        this.setupActivityTracking();
        this.setupServiceWorker();
        this.setupKeyboardShortcuts();
        this.checkAuthentication();
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
     */
    setupGlobalErrorHandler() {
        window.addEventListener('error', (event) => {
            console.error('Global error:', event.error);
            
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–ª–∫–∏—Ö –æ—à–∏–±–æ–∫
            if (event.error && !event.error.message.includes('Script error')) {
                ui.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
            }
        });

        window.addEventListener('unhandledrejection', (event) => {
            console.error('Unhandled promise rejection:', event.reason);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if (event.reason && event.reason.message && !event.reason.message.includes('NetworkError')) {
                ui.showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 'warning');
            }
        });
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    setupNetworkMonitoring() {
        window.addEventListener('online', () => {
            this.isOnline = true;
            ui.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success', 3000);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
            if (window.dashboard) {
                dashboard.refreshDashboard();
            }
        });

        window.addEventListener('offline', () => {
            this.isOnline = false;
            ui.showNotification('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 'warning', 5000);
        });
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setupActivityTracking() {
        const updateActivity = () => {
            this.lastActivity = Date.now();
        };

        // –°–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {
            document.addEventListener(event, updateActivity, { passive: true });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            const inactiveTime = Date.now() - this.lastActivity;
            const maxInactiveTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

            if (inactiveTime > maxInactiveTime) {
                this.handleInactivity();
            }
        }, 5 * 60 * 1000);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    handleInactivity() {
        if (MediaFluxAPI.isAuthenticated()) {
            ui.showNotification('–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.', 'warning', 10000);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setupServiceWorker() {
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', async () => {
                try {
                    const registration = await navigator.serviceWorker.register('/sw.js');
                    console.log('ServiceWorker registered:', registration);
                } catch (error) {
                    console.log('ServiceWorker registration failed:', error);
                }
            });
        }
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
     */
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                return;
            }

            const isCtrlCmd = e.ctrlKey || e.metaKey;

            // Ctrl/Cmd + K - –ø–æ–∏—Å–∫
            if (isCtrlCmd && e.key === 'k') {
                e.preventDefault();
                this.openSearch();
            }

            // Escape - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            if (e.key === 'Escape') {
                ui.closeModal();
            }

            // ? - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º
            if (e.key === '?' && !isCtrlCmd) {
                e.preventDefault();
                this.showKeyboardShortcuts();
            }
        });
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∏—Å–∫–∞
     */
    openSearch() {
        ui.showNotification('–ü–æ–∏—Å–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω', 'info', 2000);
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º
     */
    showKeyboardShortcuts() {
        const shortcuts = [
            { key: 'Ctrl/Cmd + R', action: '–û–±–Ω–æ–≤–∏—Ç—å dashboard' },
            { key: 'Ctrl/Cmd + N', action: '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' },
            { key: 'Ctrl/Cmd + K', action: '–ü–æ–∏—Å–∫' },
            { key: 'Escape', action: '–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ' },
            { key: '?', action: '–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É' }
        ];

        const shortcutsHTML = shortcuts.map(shortcut => 
            `<div class="shortcut-item">
                <kbd>${shortcut.key}</kbd>
                <span>${shortcut.action}</span>
            </div>`
        ).join('');

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'modal-overlay show';
        modal.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h3>
                    <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="shortcuts-list">
                        ${shortcutsHTML}
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (modal.parentNode) {
                modal.remove();
            }
        }, 10000);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async checkAuthentication() {
        if (!MediaFluxAPI.isAuthenticated()) {
            return;
        }

        try {
            await MediaFluxAPI.verifyToken();
        } catch (error) {
            console.warn('Token verification failed:', error);
            MediaFluxAPI.handleAuthError();
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
     */
    checkBrowserSupport() {
        const requiredFeatures = {
            'Fetch API': 'fetch' in window,
            'LocalStorage': 'localStorage' in window,
            'CSS Grid': CSS.supports('display', 'grid'),
            'ES6 Classes': true // –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –µ—Å—Ç—å
        };

        const unsupportedFeatures = Object.entries(requiredFeatures)
            .filter(([feature, supported]) => !supported)
            .map(([feature]) => feature);

        if (unsupportedFeatures.length > 0) {
            ui.showNotification(
                `–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: ${unsupportedFeatures.join(', ')}. –û–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.`,
                'warning',
                10000
            );
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     */
    getDeviceInfo() {
        const ua = navigator.userAgent;
        const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);
        const isTablet = /iPad|Android/i.test(ua) && !/Mobile/i.test(ua);
        const isDesktop = !isMobile && !isTablet;

        return {
            isMobile,
            isTablet,
            isDesktop,
            touchSupport: 'ontouchstart' in window,
            platform: navigator.platform,
            userAgent: ua
        };
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    optimizePerformance() {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const criticalResources = [
            '/static/css/main.css',
            '/static/css/dashboard.css'
        ];

        criticalResources.forEach(resource => {
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = resource;
            document.head.appendChild(link);
        });

        // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        this.lazyLoadScripts();
    }

    /**
     * –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
     */
    lazyLoadScripts() {
        const lazyScripts = [
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
        ];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('load', () => {
            lazyScripts.forEach(script => {
                const scriptElement = document.createElement('script');
                scriptElement.src = script;
                scriptElement.async = true;
                document.head.appendChild(scriptElement);
            });
        });
    }

    /**
     * –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    getDebugInfo() {
        return {
            version: this.version,
            isOnline: this.isOnline,
            lastActivity: new Date(this.lastActivity).toLocaleString(),
            authenticated: MediaFluxAPI.isAuthenticated(),
            userAgent: navigator.userAgent,
            viewport: {
                width: window.innerWidth,
                height: window.innerHeight
            },
            device: this.getDeviceInfo()
        };
    }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
window.log = function(message, level = 'info') {
    const timestamp = new Date().toISOString();
    const prefix = `[${timestamp}] MediaFlux Hub:`;
    
    switch (level) {
        case 'error':
            console.error(prefix, message);
            break;
        case 'warn':
            console.warn(prefix, message);
            break;
        case 'debug':
            console.debug(prefix, message);
            break;
        default:
            console.log(prefix, message);
    }
};

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
window.getDebugInfo = function() {
    if (window.mediaFluxHub) {
        return mediaFluxHub.getDebugInfo();
    }
    return null;
};

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
window.exportDebugInfo = function() {
    const debugInfo = getDebugInfo();
    if (debugInfo) {
        const dataStr = JSON.stringify(debugInfo, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `mediaflux-debug-${Date.now()}.json`;
        link.click();
        
        ui.showNotification('–î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.mediaFluxHub = new MediaFluxHub();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
    mediaFluxHub.checkBrowserSupport();
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    mediaFluxHub.optimizePerformance();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–±–∞–≥ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    if (process?.env?.NODE_ENV === 'development') {
        console.log('%cüöÄ MediaFlux Hub Debug Commands:', 'color: #667eea; font-weight: bold;');
        console.log('%cgetDebugInfo() - –ü–æ–ª—É—á–∏—Ç—å –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', 'color: #10b981;');
        console.log('%cexportDebugInfo() - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', 'color: #10b981;');
        console.log('%cMediaFluxAPI - –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API', 'color: #10b981;');
        console.log('%cui - –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI', 'color: #10b981;');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MediaFluxHub;
} 